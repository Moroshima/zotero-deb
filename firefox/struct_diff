--- structs.rs	2023-08-24 23:27:39.440802038 +0800
+++ structs_bookworm.rs	2023-08-25 21:52:58.015720460 +0800
@@ -122,7 +122,7 @@ where
         }
     }
 }
- # [ repr ( C ) ] pub struct __BindgenUnionField < T > ( :: std :: marker :: PhantomData < T > ) ; impl < T > __BindgenUnionField < T > { # [ inline ] pub fn new ( ) -> Self { __BindgenUnionField ( :: std :: marker :: PhantomData ) } # [ inline ] pub unsafe fn as_ref ( & self ) -> & T { :: std :: mem :: transmute ( self ) } # [ inline ] pub unsafe fn as_mut ( & mut self ) -> & mut T { :: std :: mem :: transmute ( self ) } } impl < T > :: std :: default :: Default for __BindgenUnionField < T > { # [ inline ] fn default ( ) -> Self { Self :: new ( ) } } impl < T > :: std :: clone :: Clone for __BindgenUnionField < T > { # [ inline ] fn clone ( & self ) -> Self { Self :: new ( ) } } impl < T > :: std :: marker :: Copy for __BindgenUnionField < T > { } impl < T > :: std :: fmt :: Debug for __BindgenUnionField < T > { fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt :: Result { fmt . write_str ( "__BindgenUnionField" ) } } impl < T > :: std :: hash :: Hash for __BindgenUnionField < T > { fn hash < H : :: std :: hash :: Hasher > ( & self , _state : & mut H ) { } } impl < T > :: std :: cmp :: PartialEq for __BindgenUnionField < T > { fn eq ( & self , _other : & __BindgenUnionField < T > ) -> bool { true } } impl < T > :: std :: cmp :: Eq for __BindgenUnionField < T > { } # [ allow ( unused_imports ) ] use self :: super :: root ; pub const NS_FONT_STYLE_NORMAL : u32 = 0 ; pub const NS_FONT_STYLE_ITALIC : u32 = 1 ; pub const NS_FONT_STYLE_OBLIQUE : u32 = 2 ; pub const NS_FONT_WEIGHT_NORMAL : u32 = 400 ; pub const NS_FONT_WEIGHT_BOLD : u32 = 700 ; pub const NS_FONT_WEIGHT_THIN : u32 = 100 ; pub const NS_FONT_STRETCH_ULTRA_CONDENSED : i32 = -4 ; pub const NS_FONT_STRETCH_EXTRA_CONDENSED : i32 = -3 ; pub const NS_FONT_STRETCH_CONDENSED : i32 = -2 ; pub const NS_FONT_STRETCH_SEMI_CONDENSED : i32 = -1 ; pub const NS_FONT_STRETCH_NORMAL : u32 = 0 ; pub const NS_FONT_STRETCH_SEMI_EXPANDED : u32 = 1 ; pub const NS_FONT_STRETCH_EXPANDED : u32 = 2 ; pub const NS_FONT_STRETCH_EXTRA_EXPANDED : u32 = 3 ; pub const NS_FONT_STRETCH_ULTRA_EXPANDED : u32 = 4 ; pub const NS_FONT_SMOOTHING_AUTO : u32 = 0 ; pub const NS_FONT_SMOOTHING_GRAYSCALE : u32 = 1 ; pub const NS_FONT_KERNING_AUTO : u32 = 0 ; pub const NS_FONT_KERNING_NONE : u32 = 1 ; pub const NS_FONT_KERNING_NORMAL : u32 = 2 ; pub const NS_FONT_SYNTHESIS_WEIGHT : u32 = 1 ; pub const NS_FONT_SYNTHESIS_STYLE : u32 = 2 ; pub const NS_FONT_DISPLAY_AUTO : u32 = 0 ; pub const NS_FONT_DISPLAY_BLOCK : u32 = 1 ; pub const NS_FONT_DISPLAY_SWAP : u32 = 2 ; pub const NS_FONT_DISPLAY_FALLBACK : u32 = 3 ; pub const NS_FONT_DISPLAY_OPTIONAL : u32 = 4 ; pub const NS_FONT_OPTICAL_SIZING_AUTO : u32 = 0 ; pub const NS_FONT_OPTICAL_SIZING_NONE : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_ALTERNATES_HISTORICAL : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_STYLISTIC : u32 = 2 ; pub const NS_FONT_VARIANT_ALTERNATES_STYLESET : u32 = 4 ; pub const NS_FONT_VARIANT_ALTERNATES_CHARACTER_VARIANT : u32 = 8 ; pub const NS_FONT_VARIANT_ALTERNATES_SWASH : u32 = 16 ; pub const NS_FONT_VARIANT_ALTERNATES_ORNAMENTS : u32 = 32 ; pub const NS_FONT_VARIANT_ALTERNATES_ANNOTATION : u32 = 64 ; pub const NS_FONT_VARIANT_ALTERNATES_COUNT : u32 = 7 ; pub const NS_FONT_VARIANT_ALTERNATES_ENUMERATED_MASK : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_FUNCTIONAL_MASK : u32 = 126 ; pub const NS_FONT_VARIANT_CAPS_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_CAPS_SMALLCAPS : u32 = 1 ; pub const NS_FONT_VARIANT_CAPS_ALLSMALL : u32 = 2 ; pub const NS_FONT_VARIANT_CAPS_PETITECAPS : u32 = 3 ; pub const NS_FONT_VARIANT_CAPS_ALLPETITE : u32 = 4 ; pub const NS_FONT_VARIANT_CAPS_TITLING : u32 = 5 ; pub const NS_FONT_VARIANT_CAPS_UNICASE : u32 = 6 ; pub const NS_FONT_VARIANT_EAST_ASIAN_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS78 : u32 = 1 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS83 : u32 = 2 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS90 : u32 = 4 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS04 : u32 = 8 ; pub const NS_FONT_VARIANT_EAST_ASIAN_SIMPLIFIED : u32 = 16 ; pub const NS_FONT_VARIANT_EAST_ASIAN_TRADITIONAL : u32 = 32 ; pub const NS_FONT_VARIANT_EAST_ASIAN_FULL_WIDTH : u32 = 64 ; pub const NS_FONT_VARIANT_EAST_ASIAN_PROP_WIDTH : u32 = 128 ; pub const NS_FONT_VARIANT_EAST_ASIAN_RUBY : u32 = 256 ; pub const NS_FONT_VARIANT_EAST_ASIAN_COUNT : u32 = 9 ; pub const NS_FONT_VARIANT_EAST_ASIAN_VARIANT_MASK : u32 = 63 ; pub const NS_FONT_VARIANT_EAST_ASIAN_WIDTH_MASK : u32 = 192 ; pub const NS_FONT_VARIANT_LIGATURES_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_LIGATURES_NONE : u32 = 1 ; pub const NS_FONT_VARIANT_LIGATURES_COMMON : u32 = 2 ; pub const NS_FONT_VARIANT_LIGATURES_NO_COMMON : u32 = 4 ; pub const NS_FONT_VARIANT_LIGATURES_DISCRETIONARY : u32 = 8 ; pub const NS_FONT_VARIANT_LIGATURES_NO_DISCRETIONARY : u32 = 16 ; pub const NS_FONT_VARIANT_LIGATURES_HISTORICAL : u32 = 32 ; pub const NS_FONT_VARIANT_LIGATURES_NO_HISTORICAL : u32 = 64 ; pub const NS_FONT_VARIANT_LIGATURES_CONTEXTUAL : u32 = 128 ; pub const NS_FONT_VARIANT_LIGATURES_NO_CONTEXTUAL : u32 = 256 ; pub const NS_FONT_VARIANT_LIGATURES_COUNT : u32 = 9 ; pub const NS_FONT_VARIANT_LIGATURES_COMMON_MASK : u32 = 6 ; pub const NS_FONT_VARIANT_LIGATURES_DISCRETIONARY_MASK : u32 = 24 ; pub const NS_FONT_VARIANT_LIGATURES_HISTORICAL_MASK : u32 = 96 ; pub const NS_FONT_VARIANT_LIGATURES_CONTEXTUAL_MASK : u32 = 384 ; pub const NS_FONT_VARIANT_NUMERIC_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_NUMERIC_LINING : u32 = 1 ; pub const NS_FONT_VARIANT_NUMERIC_OLDSTYLE : u32 = 2 ; pub const NS_FONT_VARIANT_NUMERIC_PROPORTIONAL : u32 = 4 ; pub const NS_FONT_VARIANT_NUMERIC_TABULAR : u32 = 8 ; pub const NS_FONT_VARIANT_NUMERIC_DIAGONAL_FRACTIONS : u32 = 16 ; pub const NS_FONT_VARIANT_NUMERIC_STACKED_FRACTIONS : u32 = 32 ; pub const NS_FONT_VARIANT_NUMERIC_SLASHZERO : u32 = 64 ; pub const NS_FONT_VARIANT_NUMERIC_ORDINAL : u32 = 128 ; pub const NS_FONT_VARIANT_NUMERIC_COUNT : u32 = 8 ; pub const NS_FONT_VARIANT_NUMERIC_FIGURE_MASK : u32 = 3 ; pub const NS_FONT_VARIANT_NUMERIC_SPACING_MASK : u32 = 12 ; pub const NS_FONT_VARIANT_NUMERIC_FRACTION_MASK : u32 = 48 ; pub const NS_FONT_VARIANT_POSITION_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_POSITION_SUPER : u32 = 1 ; pub const NS_FONT_VARIANT_POSITION_SUB : u32 = 2 ; pub const NS_FONT_VARIANT_WIDTH_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_WIDTH_FULL : u32 = 1 ; pub const NS_FONT_VARIANT_WIDTH_HALF : u32 = 2 ; pub const NS_FONT_VARIANT_WIDTH_THIRD : u32 = 3 ; pub const NS_FONT_VARIANT_WIDTH_QUARTER : u32 = 4 ; pub const NS_FONT_SUBSCRIPT_OFFSET_RATIO : f64 = 0.2 ; pub const NS_FONT_SUPERSCRIPT_OFFSET_RATIO : f64 = 0.34 ; pub const NS_FONT_SUB_SUPER_SIZE_RATIO_SMALL : f64 = 0.82 ; pub const NS_FONT_SUB_SUPER_SIZE_RATIO_LARGE : f64 = 0.667 ; pub const NS_FONT_SUB_SUPER_SMALL_SIZE : f64 = 20.0 ; pub const NS_FONT_SUB_SUPER_LARGE_SIZE : f64 = 45.0 ; pub const NS_FONT_VARIANT_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_SMALL_CAPS : u32 = 1 ; pub const NS_STYLE_COLOR_INHERIT_FROM_BODY : u32 = 2 ; pub const NS_STYLE_WILL_CHANGE_STACKING_CONTEXT : u32 = 1 ; pub const NS_STYLE_WILL_CHANGE_TRANSFORM : u32 = 2 ; pub const NS_STYLE_WILL_CHANGE_SCROLL : u32 = 4 ; pub const NS_STYLE_WILL_CHANGE_OPACITY : u32 = 8 ; pub const NS_STYLE_WILL_CHANGE_FIXPOS_CB : u32 = 16 ; pub const NS_STYLE_WILL_CHANGE_ABSPOS_CB : u32 = 32 ; pub const NS_STYLE_ANIMATION_ITERATION_COUNT_INFINITE : u32 = 0 ; pub const NS_STYLE_ANIMATION_PLAY_STATE_RUNNING : u32 = 0 ; pub const NS_STYLE_ANIMATION_PLAY_STATE_PAUSED : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_SCROLL : u32 = 0 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_FIXED : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_LOCAL : u32 = 2 ; pub const NS_STYLE_IMAGELAYER_CLIP_MOZ_ALMOST_PADDING : u32 = 127 ; pub const NS_STYLE_IMAGELAYER_POSITION_CENTER : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_POSITION_TOP : u32 = 2 ; pub const NS_STYLE_IMAGELAYER_POSITION_BOTTOM : u32 = 4 ; pub const NS_STYLE_IMAGELAYER_POSITION_LEFT : u32 = 8 ; pub const NS_STYLE_IMAGELAYER_POSITION_RIGHT : u32 = 16 ; pub const NS_STYLE_IMAGELAYER_SIZE_CONTAIN : u32 = 0 ; pub const NS_STYLE_IMAGELAYER_SIZE_COVER : u32 = 1 ; pub const NS_STYLE_MASK_MODE_ALPHA : u32 = 0 ; pub const NS_STYLE_MASK_MODE_LUMINANCE : u32 = 1 ; pub const NS_STYLE_MASK_MODE_MATCH_SOURCE : u32 = 2 ; pub const NS_STYLE_BG_INLINE_POLICY_EACH_BOX : u32 = 0 ; pub const NS_STYLE_BG_INLINE_POLICY_CONTINUOUS : u32 = 1 ; pub const NS_STYLE_BG_INLINE_POLICY_BOUNDING_BOX : u32 = 2 ; pub const NS_STYLE_BORDER_COLLAPSE : u32 = 0 ; pub const NS_STYLE_BORDER_SEPARATE : u32 = 1 ; pub const NS_STYLE_BORDER_WIDTH_THIN : u32 = 0 ; pub const NS_STYLE_BORDER_WIDTH_MEDIUM : u32 = 1 ; pub const NS_STYLE_BORDER_WIDTH_THICK : u32 = 2 ; pub const NS_STYLE_BORDER_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_BORDER_STYLE_GROOVE : u32 = 1 ; pub const NS_STYLE_BORDER_STYLE_RIDGE : u32 = 2 ; pub const NS_STYLE_BORDER_STYLE_DOTTED : u32 = 3 ; pub const NS_STYLE_BORDER_STYLE_DASHED : u32 = 4 ; pub const NS_STYLE_BORDER_STYLE_SOLID : u32 = 5 ; pub const NS_STYLE_BORDER_STYLE_DOUBLE : u32 = 6 ; pub const NS_STYLE_BORDER_STYLE_INSET : u32 = 7 ; pub const NS_STYLE_BORDER_STYLE_OUTSET : u32 = 8 ; pub const NS_STYLE_BORDER_STYLE_HIDDEN : u32 = 9 ; pub const NS_STYLE_BORDER_STYLE_AUTO : u32 = 10 ; pub const NS_STYLE_BORDER_IMAGE_SLICE_NOFILL : u32 = 0 ; pub const NS_STYLE_BORDER_IMAGE_SLICE_FILL : u32 = 1 ; pub const NS_STYLE_CURSOR_AUTO : u32 = 1 ; pub const NS_STYLE_CURSOR_CROSSHAIR : u32 = 2 ; pub const NS_STYLE_CURSOR_DEFAULT : u32 = 3 ; pub const NS_STYLE_CURSOR_POINTER : u32 = 4 ; pub const NS_STYLE_CURSOR_MOVE : u32 = 5 ; pub const NS_STYLE_CURSOR_E_RESIZE : u32 = 6 ; pub const NS_STYLE_CURSOR_NE_RESIZE : u32 = 7 ; pub const NS_STYLE_CURSOR_NW_RESIZE : u32 = 8 ; pub const NS_STYLE_CURSOR_N_RESIZE : u32 = 9 ; pub const NS_STYLE_CURSOR_SE_RESIZE : u32 = 10 ; pub const NS_STYLE_CURSOR_SW_RESIZE : u32 = 11 ; pub const NS_STYLE_CURSOR_S_RESIZE : u32 = 12 ; pub const NS_STYLE_CURSOR_W_RESIZE : u32 = 13 ; pub const NS_STYLE_CURSOR_TEXT : u32 = 14 ; pub const NS_STYLE_CURSOR_WAIT : u32 = 15 ; pub const NS_STYLE_CURSOR_HELP : u32 = 16 ; pub const NS_STYLE_CURSOR_COPY : u32 = 17 ; pub const NS_STYLE_CURSOR_ALIAS : u32 = 18 ; pub const NS_STYLE_CURSOR_CONTEXT_MENU : u32 = 19 ; pub const NS_STYLE_CURSOR_CELL : u32 = 20 ; pub const NS_STYLE_CURSOR_GRAB : u32 = 21 ; pub const NS_STYLE_CURSOR_GRABBING : u32 = 22 ; pub const NS_STYLE_CURSOR_SPINNING : u32 = 23 ; pub const NS_STYLE_CURSOR_ZOOM_IN : u32 = 24 ; pub const NS_STYLE_CURSOR_ZOOM_OUT : u32 = 25 ; pub const NS_STYLE_CURSOR_NOT_ALLOWED : u32 = 26 ; pub const NS_STYLE_CURSOR_COL_RESIZE : u32 = 27 ; pub const NS_STYLE_CURSOR_ROW_RESIZE : u32 = 28 ; pub const NS_STYLE_CURSOR_NO_DROP : u32 = 29 ; pub const NS_STYLE_CURSOR_VERTICAL_TEXT : u32 = 30 ; pub const NS_STYLE_CURSOR_ALL_SCROLL : u32 = 31 ; pub const NS_STYLE_CURSOR_NESW_RESIZE : u32 = 32 ; pub const NS_STYLE_CURSOR_NWSE_RESIZE : u32 = 33 ; pub const NS_STYLE_CURSOR_NS_RESIZE : u32 = 34 ; pub const NS_STYLE_CURSOR_EW_RESIZE : u32 = 35 ; pub const NS_STYLE_CURSOR_NONE : u32 = 36 ; pub const NS_STYLE_DIRECTION_LTR : u32 = 0 ; pub const NS_STYLE_DIRECTION_RTL : u32 = 1 ; pub const NS_STYLE_WRITING_MODE_HORIZONTAL_TB : u32 = 0 ; pub const NS_STYLE_WRITING_MODE_VERTICAL_RL : u32 = 1 ; pub const NS_STYLE_WRITING_MODE_VERTICAL_LR : u32 = 3 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_MASK : u32 = 4 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_RL : u32 = 5 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_LR : u32 = 7 ; pub const NS_STYLE_CONTAIN_NONE : u32 = 0 ; pub const NS_STYLE_CONTAIN_STRICT : u32 = 1 ; pub const NS_STYLE_CONTAIN_LAYOUT : u32 = 2 ; pub const NS_STYLE_CONTAIN_STYLE : u32 = 4 ; pub const NS_STYLE_CONTAIN_PAINT : u32 = 8 ; pub const NS_STYLE_CONTAIN_ALL_BITS : u32 = 14 ; pub const NS_STYLE_ALIGN_AUTO : u32 = 0 ; pub const NS_STYLE_ALIGN_NORMAL : u32 = 1 ; pub const NS_STYLE_ALIGN_START : u32 = 2 ; pub const NS_STYLE_ALIGN_END : u32 = 3 ; pub const NS_STYLE_ALIGN_FLEX_START : u32 = 4 ; pub const NS_STYLE_ALIGN_FLEX_END : u32 = 5 ; pub const NS_STYLE_ALIGN_CENTER : u32 = 6 ; pub const NS_STYLE_ALIGN_LEFT : u32 = 7 ; pub const NS_STYLE_ALIGN_RIGHT : u32 = 8 ; pub const NS_STYLE_ALIGN_BASELINE : u32 = 9 ; pub const NS_STYLE_ALIGN_LAST_BASELINE : u32 = 10 ; pub const NS_STYLE_ALIGN_STRETCH : u32 = 11 ; pub const NS_STYLE_ALIGN_SELF_START : u32 = 12 ; pub const NS_STYLE_ALIGN_SELF_END : u32 = 13 ; pub const NS_STYLE_ALIGN_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_ALIGN_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_ALIGN_SPACE_EVENLY : u32 = 16 ; pub const NS_STYLE_ALIGN_LEGACY : u32 = 32 ; pub const NS_STYLE_ALIGN_SAFE : u32 = 64 ; pub const NS_STYLE_ALIGN_UNSAFE : u32 = 128 ; pub const NS_STYLE_ALIGN_FLAG_BITS : u32 = 224 ; pub const NS_STYLE_ALIGN_ALL_BITS : u32 = 255 ; pub const NS_STYLE_ALIGN_ALL_SHIFT : u32 = 8 ; pub const NS_STYLE_JUSTIFY_AUTO : u32 = 0 ; pub const NS_STYLE_JUSTIFY_NORMAL : u32 = 1 ; pub const NS_STYLE_JUSTIFY_START : u32 = 2 ; pub const NS_STYLE_JUSTIFY_END : u32 = 3 ; pub const NS_STYLE_JUSTIFY_FLEX_START : u32 = 4 ; pub const NS_STYLE_JUSTIFY_FLEX_END : u32 = 5 ; pub const NS_STYLE_JUSTIFY_CENTER : u32 = 6 ; pub const NS_STYLE_JUSTIFY_LEFT : u32 = 7 ; pub const NS_STYLE_JUSTIFY_RIGHT : u32 = 8 ; pub const NS_STYLE_JUSTIFY_BASELINE : u32 = 9 ; pub const NS_STYLE_JUSTIFY_LAST_BASELINE : u32 = 10 ; pub const NS_STYLE_JUSTIFY_STRETCH : u32 = 11 ; pub const NS_STYLE_JUSTIFY_SELF_START : u32 = 12 ; pub const NS_STYLE_JUSTIFY_SELF_END : u32 = 13 ; pub const NS_STYLE_JUSTIFY_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_JUSTIFY_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_JUSTIFY_SPACE_EVENLY : u32 = 16 ; pub const NS_STYLE_JUSTIFY_LEGACY : u32 = 32 ; pub const NS_STYLE_JUSTIFY_SAFE : u32 = 64 ; pub const NS_STYLE_JUSTIFY_UNSAFE : u32 = 128 ; pub const NS_STYLE_JUSTIFY_FLAG_BITS : u32 = 224 ; pub const NS_STYLE_JUSTIFY_ALL_BITS : u32 = 255 ; pub const NS_STYLE_JUSTIFY_ALL_SHIFT : u32 = 8 ; pub const NS_STYLE_FLEX_DIRECTION_ROW : u32 = 0 ; pub const NS_STYLE_FLEX_DIRECTION_ROW_REVERSE : u32 = 1 ; pub const NS_STYLE_FLEX_DIRECTION_COLUMN : u32 = 2 ; pub const NS_STYLE_FLEX_DIRECTION_COLUMN_REVERSE : u32 = 3 ; pub const NS_STYLE_FLEX_WRAP_NOWRAP : u32 = 0 ; pub const NS_STYLE_FLEX_WRAP_WRAP : u32 = 1 ; pub const NS_STYLE_FLEX_WRAP_WRAP_REVERSE : u32 = 2 ; pub const NS_STYLE_ORDER_INITIAL : u32 = 0 ; pub const NS_STYLE_JUSTIFY_CONTENT_FLEX_START : u32 = 4 ; pub const NS_STYLE_JUSTIFY_CONTENT_FLEX_END : u32 = 5 ; pub const NS_STYLE_JUSTIFY_CONTENT_CENTER : u32 = 6 ; pub const NS_STYLE_JUSTIFY_CONTENT_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_JUSTIFY_CONTENT_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_FILTER_NONE : u32 = 0 ; pub const NS_STYLE_FILTER_URL : u32 = 1 ; pub const NS_STYLE_FILTER_BLUR : u32 = 2 ; pub const NS_STYLE_FILTER_BRIGHTNESS : u32 = 3 ; pub const NS_STYLE_FILTER_CONTRAST : u32 = 4 ; pub const NS_STYLE_FILTER_GRAYSCALE : u32 = 5 ; pub const NS_STYLE_FILTER_INVERT : u32 = 6 ; pub const NS_STYLE_FILTER_OPACITY : u32 = 7 ; pub const NS_STYLE_FILTER_SATURATE : u32 = 8 ; pub const NS_STYLE_FILTER_SEPIA : u32 = 9 ; pub const NS_STYLE_FILTER_HUE_ROTATE : u32 = 10 ; pub const NS_STYLE_FILTER_DROP_SHADOW : u32 = 11 ; pub const NS_STYLE_FONT_STYLE_NORMAL : u32 = 0 ; pub const NS_STYLE_FONT_STYLE_ITALIC : u32 = 1 ; pub const NS_STYLE_FONT_STYLE_OBLIQUE : u32 = 2 ; pub const NS_STYLE_FONT_WEIGHT_NORMAL : u32 = 400 ; pub const NS_STYLE_FONT_WEIGHT_BOLD : u32 = 700 ; pub const NS_STYLE_FONT_WEIGHT_BOLDER : i32 = -1 ; pub const NS_STYLE_FONT_WEIGHT_LIGHTER : i32 = -2 ; pub const NS_STYLE_FONT_SIZE_XXSMALL : u32 = 0 ; pub const NS_STYLE_FONT_SIZE_XSMALL : u32 = 1 ; pub const NS_STYLE_FONT_SIZE_SMALL : u32 = 2 ; pub const NS_STYLE_FONT_SIZE_MEDIUM : u32 = 3 ; pub const NS_STYLE_FONT_SIZE_LARGE : u32 = 4 ; pub const NS_STYLE_FONT_SIZE_XLARGE : u32 = 5 ; pub const NS_STYLE_FONT_SIZE_XXLARGE : u32 = 6 ; pub const NS_STYLE_FONT_SIZE_XXXLARGE : u32 = 7 ; pub const NS_STYLE_FONT_SIZE_LARGER : u32 = 8 ; pub const NS_STYLE_FONT_SIZE_SMALLER : u32 = 9 ; pub const NS_STYLE_FONT_SIZE_NO_KEYWORD : u32 = 10 ; pub const NS_STYLE_FONT_STRETCH_ULTRA_CONDENSED : i32 = -4 ; pub const NS_STYLE_FONT_STRETCH_EXTRA_CONDENSED : i32 = -3 ; pub const NS_STYLE_FONT_STRETCH_CONDENSED : i32 = -2 ; pub const NS_STYLE_FONT_STRETCH_SEMI_CONDENSED : i32 = -1 ; pub const NS_STYLE_FONT_STRETCH_NORMAL : u32 = 0 ; pub const NS_STYLE_FONT_STRETCH_SEMI_EXPANDED : u32 = 1 ; pub const NS_STYLE_FONT_STRETCH_EXPANDED : u32 = 2 ; pub const NS_STYLE_FONT_STRETCH_EXTRA_EXPANDED : u32 = 3 ; pub const NS_STYLE_FONT_STRETCH_ULTRA_EXPANDED : u32 = 4 ; pub const NS_STYLE_FONT_CAPTION : u32 = 1 ; pub const NS_STYLE_FONT_ICON : u32 = 2 ; pub const NS_STYLE_FONT_MENU : u32 = 3 ; pub const NS_STYLE_FONT_MESSAGE_BOX : u32 = 4 ; pub const NS_STYLE_FONT_SMALL_CAPTION : u32 = 5 ; pub const NS_STYLE_FONT_STATUS_BAR : u32 = 6 ; pub const NS_STYLE_FONT_WINDOW : u32 = 7 ; pub const NS_STYLE_FONT_DOCUMENT : u32 = 8 ; pub const NS_STYLE_FONT_WORKSPACE : u32 = 9 ; pub const NS_STYLE_FONT_DESKTOP : u32 = 10 ; pub const NS_STYLE_FONT_INFO : u32 = 11 ; pub const NS_STYLE_FONT_DIALOG : u32 = 12 ; pub const NS_STYLE_FONT_BUTTON : u32 = 13 ; pub const NS_STYLE_FONT_PULL_DOWN_MENU : u32 = 14 ; pub const NS_STYLE_FONT_LIST : u32 = 15 ; pub const NS_STYLE_FONT_FIELD : u32 = 16 ; pub const NS_STYLE_GRID_AUTO_FLOW_ROW : u32 = 1 ; pub const NS_STYLE_GRID_AUTO_FLOW_COLUMN : u32 = 2 ; pub const NS_STYLE_GRID_AUTO_FLOW_DENSE : u32 = 4 ; pub const NS_STYLE_GRID_TEMPLATE_SUBGRID : u32 = 0 ; pub const NS_STYLE_GRID_REPEAT_AUTO_FILL : u32 = 0 ; pub const NS_STYLE_GRID_REPEAT_AUTO_FIT : u32 = 1 ; pub const NS_MATHML_DEFAULT_SCRIPT_SIZE_MULTIPLIER : f64 = 0.71 ; pub const NS_MATHML_DEFAULT_SCRIPT_MIN_SIZE_PT : u32 = 8 ; pub const NS_MATHML_MATHVARIANT_NONE : u32 = 0 ; pub const NS_MATHML_MATHVARIANT_NORMAL : u32 = 1 ; pub const NS_MATHML_MATHVARIANT_BOLD : u32 = 2 ; pub const NS_MATHML_MATHVARIANT_ITALIC : u32 = 3 ; pub const NS_MATHML_MATHVARIANT_BOLD_ITALIC : u32 = 4 ; pub const NS_MATHML_MATHVARIANT_SCRIPT : u32 = 5 ; pub const NS_MATHML_MATHVARIANT_BOLD_SCRIPT : u32 = 6 ; pub const NS_MATHML_MATHVARIANT_FRAKTUR : u32 = 7 ; pub const NS_MATHML_MATHVARIANT_DOUBLE_STRUCK : u32 = 8 ; pub const NS_MATHML_MATHVARIANT_BOLD_FRAKTUR : u32 = 9 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF : u32 = 10 ; pub const NS_MATHML_MATHVARIANT_BOLD_SANS_SERIF : u32 = 11 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF_ITALIC : u32 = 12 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF_BOLD_ITALIC : u32 = 13 ; pub const NS_MATHML_MATHVARIANT_MONOSPACE : u32 = 14 ; pub const NS_MATHML_MATHVARIANT_INITIAL : u32 = 15 ; pub const NS_MATHML_MATHVARIANT_TAILED : u32 = 16 ; pub const NS_MATHML_MATHVARIANT_LOOPED : u32 = 17 ; pub const NS_MATHML_MATHVARIANT_STRETCHED : u32 = 18 ; pub const NS_MATHML_DISPLAYSTYLE_INLINE : u32 = 0 ; pub const NS_MATHML_DISPLAYSTYLE_BLOCK : u32 = 1 ; pub const NS_STYLE_WIDTH_MAX_CONTENT : u32 = 0 ; pub const NS_STYLE_WIDTH_MIN_CONTENT : u32 = 1 ; pub const NS_STYLE_WIDTH_FIT_CONTENT : u32 = 2 ; pub const NS_STYLE_WIDTH_AVAILABLE : u32 = 3 ; pub const NS_STYLE_POSITION_STATIC : u32 = 0 ; pub const NS_STYLE_POSITION_RELATIVE : u32 = 1 ; pub const NS_STYLE_POSITION_ABSOLUTE : u32 = 2 ; pub const NS_STYLE_POSITION_FIXED : u32 = 3 ; pub const NS_STYLE_POSITION_STICKY : u32 = 4 ; pub const NS_STYLE_CLIP_AUTO : u32 = 0 ; pub const NS_STYLE_CLIP_RECT : u32 = 1 ; pub const NS_STYLE_CLIP_TYPE_MASK : u32 = 15 ; pub const NS_STYLE_CLIP_LEFT_AUTO : u32 = 16 ; pub const NS_STYLE_CLIP_TOP_AUTO : u32 = 32 ; pub const NS_STYLE_CLIP_RIGHT_AUTO : u32 = 64 ; pub const NS_STYLE_CLIP_BOTTOM_AUTO : u32 = 128 ; pub const NS_STYLE_FRAME_YES : u32 = 0 ; pub const NS_STYLE_FRAME_NO : u32 = 1 ; pub const NS_STYLE_FRAME_0 : u32 = 2 ; pub const NS_STYLE_FRAME_1 : u32 = 3 ; pub const NS_STYLE_FRAME_ON : u32 = 4 ; pub const NS_STYLE_FRAME_OFF : u32 = 5 ; pub const NS_STYLE_FRAME_AUTO : u32 = 6 ; pub const NS_STYLE_FRAME_SCROLL : u32 = 7 ; pub const NS_STYLE_FRAME_NOSCROLL : u32 = 8 ; pub const NS_STYLE_OVERFLOW_VISIBLE : u32 = 0 ; pub const NS_STYLE_OVERFLOW_HIDDEN : u32 = 1 ; pub const NS_STYLE_OVERFLOW_SCROLL : u32 = 2 ; pub const NS_STYLE_OVERFLOW_AUTO : u32 = 3 ; pub const NS_STYLE_OVERFLOW_CLIP : u32 = 4 ; pub const NS_STYLE_OVERFLOW_SCROLLBARS_HORIZONTAL : u32 = 5 ; pub const NS_STYLE_OVERFLOW_SCROLLBARS_VERTICAL : u32 = 6 ; pub const NS_STYLE_OVERFLOW_CLIP_BOX_PADDING_BOX : u32 = 0 ; pub const NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX : u32 = 1 ; pub const NS_STYLE_LIST_STYLE_CUSTOM : i32 = -1 ; pub const NS_STYLE_LIST_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_LIST_STYLE_DECIMAL : u32 = 1 ; pub const NS_STYLE_LIST_STYLE_DISC : u32 = 2 ; pub const NS_STYLE_LIST_STYLE_CIRCLE : u32 = 3 ; pub const NS_STYLE_LIST_STYLE_SQUARE : u32 = 4 ; pub const NS_STYLE_LIST_STYLE_DISCLOSURE_CLOSED : u32 = 5 ; pub const NS_STYLE_LIST_STYLE_DISCLOSURE_OPEN : u32 = 6 ; pub const NS_STYLE_LIST_STYLE_HEBREW : u32 = 7 ; pub const NS_STYLE_LIST_STYLE_JAPANESE_INFORMAL : u32 = 8 ; pub const NS_STYLE_LIST_STYLE_JAPANESE_FORMAL : u32 = 9 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANGUL_FORMAL : u32 = 10 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANJA_INFORMAL : u32 = 11 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANJA_FORMAL : u32 = 12 ; pub const NS_STYLE_LIST_STYLE_SIMP_CHINESE_INFORMAL : u32 = 13 ; pub const NS_STYLE_LIST_STYLE_SIMP_CHINESE_FORMAL : u32 = 14 ; pub const NS_STYLE_LIST_STYLE_TRAD_CHINESE_INFORMAL : u32 = 15 ; pub const NS_STYLE_LIST_STYLE_TRAD_CHINESE_FORMAL : u32 = 16 ; pub const NS_STYLE_LIST_STYLE_ETHIOPIC_NUMERIC : u32 = 17 ; pub const NS_STYLE_LIST_STYLE_LOWER_ROMAN : u32 = 100 ; pub const NS_STYLE_LIST_STYLE_UPPER_ROMAN : u32 = 101 ; pub const NS_STYLE_LIST_STYLE_LOWER_ALPHA : u32 = 102 ; pub const NS_STYLE_LIST_STYLE_UPPER_ALPHA : u32 = 103 ; pub const NS_STYLE_LIST_STYLE_POSITION_INSIDE : u32 = 0 ; pub const NS_STYLE_LIST_STYLE_POSITION_OUTSIDE : u32 = 1 ; pub const NS_STYLE_MARGIN_SIZE_AUTO : u32 = 0 ; pub const NS_STYLE_POINTER_EVENTS_NONE : u32 = 0 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLEPAINTED : u32 = 1 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLEFILL : u32 = 2 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLESTROKE : u32 = 3 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLE : u32 = 4 ; pub const NS_STYLE_POINTER_EVENTS_PAINTED : u32 = 5 ; pub const NS_STYLE_POINTER_EVENTS_FILL : u32 = 6 ; pub const NS_STYLE_POINTER_EVENTS_STROKE : u32 = 7 ; pub const NS_STYLE_POINTER_EVENTS_ALL : u32 = 8 ; pub const NS_STYLE_POINTER_EVENTS_AUTO : u32 = 9 ; pub const NS_STYLE_IMAGE_ORIENTATION_FLIP : u32 = 0 ; pub const NS_STYLE_IMAGE_ORIENTATION_FROM_IMAGE : u32 = 1 ; pub const NS_STYLE_ISOLATION_AUTO : u32 = 0 ; pub const NS_STYLE_ISOLATION_ISOLATE : u32 = 1 ; pub const NS_STYLE_OBJECT_FIT_FILL : u32 = 0 ; pub const NS_STYLE_OBJECT_FIT_CONTAIN : u32 = 1 ; pub const NS_STYLE_OBJECT_FIT_COVER : u32 = 2 ; pub const NS_STYLE_OBJECT_FIT_NONE : u32 = 3 ; pub const NS_STYLE_OBJECT_FIT_SCALE_DOWN : u32 = 4 ; pub const NS_STYLE_RESIZE_NONE : u32 = 0 ; pub const NS_STYLE_RESIZE_BOTH : u32 = 1 ; pub const NS_STYLE_RESIZE_HORIZONTAL : u32 = 2 ; pub const NS_STYLE_RESIZE_VERTICAL : u32 = 3 ; pub const NS_STYLE_TEXT_ALIGN_START : u32 = 0 ; pub const NS_STYLE_TEXT_ALIGN_LEFT : u32 = 1 ; pub const NS_STYLE_TEXT_ALIGN_RIGHT : u32 = 2 ; pub const NS_STYLE_TEXT_ALIGN_CENTER : u32 = 3 ; pub const NS_STYLE_TEXT_ALIGN_JUSTIFY : u32 = 4 ; pub const NS_STYLE_TEXT_ALIGN_CHAR : u32 = 5 ; pub const NS_STYLE_TEXT_ALIGN_END : u32 = 6 ; pub const NS_STYLE_TEXT_ALIGN_AUTO : u32 = 7 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_CENTER : u32 = 8 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_RIGHT : u32 = 9 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_LEFT : u32 = 10 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_CENTER_OR_INHERIT : u32 = 11 ; pub const NS_STYLE_TEXT_ALIGN_UNSAFE : u32 = 12 ; pub const NS_STYLE_TEXT_ALIGN_MATCH_PARENT : u32 = 13 ; pub const NS_STYLE_TEXT_DECORATION_LINE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_DECORATION_LINE_UNDERLINE : u32 = 1 ; pub const NS_STYLE_TEXT_DECORATION_LINE_OVERLINE : u32 = 2 ; pub const NS_STYLE_TEXT_DECORATION_LINE_LINE_THROUGH : u32 = 4 ; pub const NS_STYLE_TEXT_DECORATION_LINE_BLINK : u32 = 8 ; pub const NS_STYLE_TEXT_DECORATION_LINE_OVERRIDE_ALL : u32 = 16 ; pub const NS_STYLE_TEXT_DECORATION_LINE_LINES_MASK : u32 = 7 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DOTTED : u32 = 1 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DASHED : u32 = 2 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_SOLID : u32 = 3 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DOUBLE : u32 = 4 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_WAVY : u32 = 5 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_MAX : u32 = 5 ; pub const NS_STYLE_TEXT_OVERFLOW_CLIP : u32 = 0 ; pub const NS_STYLE_TEXT_OVERFLOW_ELLIPSIS : u32 = 1 ; pub const NS_STYLE_TEXT_OVERFLOW_STRING : u32 = 2 ; pub const NS_STYLE_TEXT_TRANSFORM_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_TRANSFORM_CAPITALIZE : u32 = 1 ; pub const NS_STYLE_TEXT_TRANSFORM_LOWERCASE : u32 = 2 ; pub const NS_STYLE_TEXT_TRANSFORM_UPPERCASE : u32 = 3 ; pub const NS_STYLE_TEXT_TRANSFORM_FULL_WIDTH : u32 = 4 ; pub const NS_STYLE_TOUCH_ACTION_NONE : u32 = 1 ; pub const NS_STYLE_TOUCH_ACTION_AUTO : u32 = 2 ; pub const NS_STYLE_TOUCH_ACTION_PAN_X : u32 = 4 ; pub const NS_STYLE_TOUCH_ACTION_PAN_Y : u32 = 8 ; pub const NS_STYLE_TOUCH_ACTION_MANIPULATION : u32 = 16 ; pub const NS_STYLE_TOP_LAYER_NONE : u32 = 0 ; pub const NS_STYLE_TOP_LAYER_TOP : u32 = 1 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE : u32 = 0 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_LINEAR : u32 = 1 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_IN : u32 = 2 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_OUT : u32 = 3 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_IN_OUT : u32 = 4 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_STEP_START : u32 = 5 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_STEP_END : u32 = 6 ; pub const NS_STYLE_VERTICAL_ALIGN_BASELINE : u32 = 14 ; pub const NS_STYLE_VERTICAL_ALIGN_SUB : u32 = 15 ; pub const NS_STYLE_VERTICAL_ALIGN_SUPER : u32 = 16 ; pub const NS_STYLE_VERTICAL_ALIGN_TOP : u32 = 17 ; pub const NS_STYLE_VERTICAL_ALIGN_TEXT_TOP : u32 = 18 ; pub const NS_STYLE_VERTICAL_ALIGN_MIDDLE : u32 = 19 ; pub const NS_STYLE_VERTICAL_ALIGN_TEXT_BOTTOM : u32 = 20 ; pub const NS_STYLE_VERTICAL_ALIGN_BOTTOM : u32 = 21 ; pub const NS_STYLE_VERTICAL_ALIGN_MIDDLE_WITH_BASELINE : u32 = 22 ; pub const NS_STYLE_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_VISIBILITY_COLLAPSE : u32 = 2 ; pub const NS_STYLE_TABSIZE_INITIAL : u32 = 8 ; pub const NS_STYLE_WORDBREAK_NORMAL : u32 = 0 ; pub const NS_STYLE_WORDBREAK_BREAK_ALL : u32 = 1 ; pub const NS_STYLE_WORDBREAK_KEEP_ALL : u32 = 2 ; pub const NS_STYLE_OVERFLOWWRAP_NORMAL : u32 = 0 ; pub const NS_STYLE_OVERFLOWWRAP_BREAK_WORD : u32 = 1 ; pub const NS_STYLE_RUBY_ALIGN_START : u32 = 0 ; pub const NS_STYLE_RUBY_ALIGN_CENTER : u32 = 1 ; pub const NS_STYLE_RUBY_ALIGN_SPACE_BETWEEN : u32 = 2 ; pub const NS_STYLE_RUBY_ALIGN_SPACE_AROUND : u32 = 3 ; pub const NS_STYLE_RUBY_POSITION_OVER : u32 = 0 ; pub const NS_STYLE_RUBY_POSITION_UNDER : u32 = 1 ; pub const NS_STYLE_RUBY_POSITION_INTER_CHARACTER : u32 = 2 ; pub const NS_STYLE_TEXT_SIZE_ADJUST_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_SIZE_ADJUST_AUTO : u32 = 1 ; pub const NS_STYLE_TEXT_ORIENTATION_MIXED : u32 = 0 ; pub const NS_STYLE_TEXT_ORIENTATION_UPRIGHT : u32 = 1 ; pub const NS_STYLE_TEXT_ORIENTATION_SIDEWAYS : u32 = 2 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_ALL : u32 = 1 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_2 : u32 = 2 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_3 : u32 = 3 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_4 : u32 = 4 ; pub const NS_STYLE_LINE_HEIGHT_BLOCK_HEIGHT : u32 = 0 ; pub const NS_STYLE_UNICODE_BIDI_NORMAL : u32 = 0 ; pub const NS_STYLE_UNICODE_BIDI_EMBED : u32 = 1 ; pub const NS_STYLE_UNICODE_BIDI_ISOLATE : u32 = 2 ; pub const NS_STYLE_UNICODE_BIDI_BIDI_OVERRIDE : u32 = 4 ; pub const NS_STYLE_UNICODE_BIDI_ISOLATE_OVERRIDE : u32 = 6 ; pub const NS_STYLE_UNICODE_BIDI_PLAINTEXT : u32 = 8 ; pub const NS_STYLE_TABLE_LAYOUT_AUTO : u32 = 0 ; pub const NS_STYLE_TABLE_LAYOUT_FIXED : u32 = 1 ; pub const NS_STYLE_TABLE_EMPTY_CELLS_HIDE : u32 = 0 ; pub const NS_STYLE_TABLE_EMPTY_CELLS_SHOW : u32 = 1 ; pub const NS_STYLE_CAPTION_SIDE_TOP : u32 = 0 ; pub const NS_STYLE_CAPTION_SIDE_RIGHT : u32 = 1 ; pub const NS_STYLE_CAPTION_SIDE_BOTTOM : u32 = 2 ; pub const NS_STYLE_CAPTION_SIDE_LEFT : u32 = 3 ; pub const NS_STYLE_CAPTION_SIDE_TOP_OUTSIDE : u32 = 4 ; pub const NS_STYLE_CAPTION_SIDE_BOTTOM_OUTSIDE : u32 = 5 ; pub const NS_STYLE_CELL_SCOPE_ROW : u32 = 0 ; pub const NS_STYLE_CELL_SCOPE_COL : u32 = 1 ; pub const NS_STYLE_CELL_SCOPE_ROWGROUP : u32 = 2 ; pub const NS_STYLE_CELL_SCOPE_COLGROUP : u32 = 3 ; pub const NS_STYLE_PAGE_MARKS_NONE : u32 = 0 ; pub const NS_STYLE_PAGE_MARKS_CROP : u32 = 1 ; pub const NS_STYLE_PAGE_MARKS_REGISTER : u32 = 2 ; pub const NS_STYLE_PAGE_SIZE_AUTO : u32 = 0 ; pub const NS_STYLE_PAGE_SIZE_PORTRAIT : u32 = 1 ; pub const NS_STYLE_PAGE_SIZE_LANDSCAPE : u32 = 2 ; pub const NS_STYLE_PAGE_BREAK_AUTO : u32 = 0 ; pub const NS_STYLE_PAGE_BREAK_ALWAYS : u32 = 1 ; pub const NS_STYLE_PAGE_BREAK_AVOID : u32 = 2 ; pub const NS_STYLE_PAGE_BREAK_LEFT : u32 = 3 ; pub const NS_STYLE_PAGE_BREAK_RIGHT : u32 = 4 ; pub const NS_STYLE_COLUMN_COUNT_AUTO : u32 = 0 ; pub const NS_STYLE_COLUMN_COUNT_UNLIMITED : i32 = -1 ; pub const NS_STYLE_COLUMN_FILL_AUTO : u32 = 0 ; pub const NS_STYLE_COLUMN_FILL_BALANCE : u32 = 1 ; pub const NS_STYLE_COLUMN_SPAN_NONE : u32 = 0 ; pub const NS_STYLE_COLUMN_SPAN_ALL : u32 = 1 ; pub const NS_STYLE_IME_MODE_AUTO : u32 = 0 ; pub const NS_STYLE_IME_MODE_NORMAL : u32 = 1 ; pub const NS_STYLE_IME_MODE_ACTIVE : u32 = 2 ; pub const NS_STYLE_IME_MODE_DISABLED : u32 = 3 ; pub const NS_STYLE_IME_MODE_INACTIVE : u32 = 4 ; pub const NS_STYLE_GRADIENT_SHAPE_LINEAR : u32 = 0 ; pub const NS_STYLE_GRADIENT_SHAPE_ELLIPTICAL : u32 = 1 ; pub const NS_STYLE_GRADIENT_SHAPE_CIRCULAR : u32 = 2 ; pub const NS_STYLE_GRADIENT_SIZE_CLOSEST_SIDE : u32 = 0 ; pub const NS_STYLE_GRADIENT_SIZE_CLOSEST_CORNER : u32 = 1 ; pub const NS_STYLE_GRADIENT_SIZE_FARTHEST_SIDE : u32 = 2 ; pub const NS_STYLE_GRADIENT_SIZE_FARTHEST_CORNER : u32 = 3 ; pub const NS_STYLE_GRADIENT_SIZE_EXPLICIT_SIZE : u32 = 4 ; pub const NS_STYLE_CONTEXT_PROPERTY_FILL : u32 = 1 ; pub const NS_STYLE_CONTEXT_PROPERTY_STROKE : u32 = 2 ; pub const NS_STYLE_CONTEXT_PROPERTY_FILL_OPACITY : u32 = 4 ; pub const NS_STYLE_CONTEXT_PROPERTY_STROKE_OPACITY : u32 = 8 ; pub const NS_STYLE_WINDOW_SHADOW_NONE : u32 = 0 ; pub const NS_STYLE_WINDOW_SHADOW_DEFAULT : u32 = 1 ; pub const NS_STYLE_WINDOW_SHADOW_MENU : u32 = 2 ; pub const NS_STYLE_WINDOW_SHADOW_TOOLTIP : u32 = 3 ; pub const NS_STYLE_WINDOW_SHADOW_SHEET : u32 = 4 ; pub const NS_STYLE_DOMINANT_BASELINE_AUTO : u32 = 0 ; pub const NS_STYLE_DOMINANT_BASELINE_USE_SCRIPT : u32 = 1 ; pub const NS_STYLE_DOMINANT_BASELINE_NO_CHANGE : u32 = 2 ; pub const NS_STYLE_DOMINANT_BASELINE_RESET_SIZE : u32 = 3 ; pub const NS_STYLE_DOMINANT_BASELINE_IDEOGRAPHIC : u32 = 4 ; pub const NS_STYLE_DOMINANT_BASELINE_ALPHABETIC : u32 = 5 ; pub const NS_STYLE_DOMINANT_BASELINE_HANGING : u32 = 6 ; pub const NS_STYLE_DOMINANT_BASELINE_MATHEMATICAL : u32 = 7 ; pub const NS_STYLE_DOMINANT_BASELINE_CENTRAL : u32 = 8 ; pub const NS_STYLE_DOMINANT_BASELINE_MIDDLE : u32 = 9 ; pub const NS_STYLE_DOMINANT_BASELINE_TEXT_AFTER_EDGE : u32 = 10 ; pub const NS_STYLE_DOMINANT_BASELINE_TEXT_BEFORE_EDGE : u32 = 11 ; pub const NS_STYLE_IMAGE_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_IMAGE_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_IMAGE_RENDERING_OPTIMIZEQUALITY : u32 = 2 ; pub const NS_STYLE_IMAGE_RENDERING_CRISPEDGES : u32 = 3 ; pub const NS_STYLE_MASK_TYPE_LUMINANCE : u32 = 0 ; pub const NS_STYLE_MASK_TYPE_ALPHA : u32 = 1 ; pub const NS_STYLE_PAINT_ORDER_NORMAL : u32 = 0 ; pub const NS_STYLE_PAINT_ORDER_FILL : u32 = 1 ; pub const NS_STYLE_PAINT_ORDER_STROKE : u32 = 2 ; pub const NS_STYLE_PAINT_ORDER_MARKERS : u32 = 3 ; pub const NS_STYLE_PAINT_ORDER_LAST_VALUE : u32 = 3 ; pub const NS_STYLE_PAINT_ORDER_BITWIDTH : u32 = 2 ; pub const NS_STYLE_SHAPE_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_SHAPE_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_SHAPE_RENDERING_CRISPEDGES : u32 = 2 ; pub const NS_STYLE_SHAPE_RENDERING_GEOMETRICPRECISION : u32 = 3 ; pub const NS_STYLE_STROKE_LINECAP_BUTT : u32 = 0 ; pub const NS_STYLE_STROKE_LINECAP_ROUND : u32 = 1 ; pub const NS_STYLE_STROKE_LINECAP_SQUARE : u32 = 2 ; pub const NS_STYLE_STROKE_LINEJOIN_MITER : u32 = 0 ; pub const NS_STYLE_STROKE_LINEJOIN_ROUND : u32 = 1 ; pub const NS_STYLE_STROKE_LINEJOIN_BEVEL : u32 = 2 ; pub const NS_STYLE_STROKE_PROP_CONTEXT_VALUE : u32 = 0 ; pub const NS_STYLE_TEXT_ANCHOR_START : u32 = 0 ; pub const NS_STYLE_TEXT_ANCHOR_MIDDLE : u32 = 1 ; pub const NS_STYLE_TEXT_ANCHOR_END : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_OVER : u32 = 1 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_UNDER : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_LEFT : u32 = 4 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_RIGHT : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_DEFAULT : u32 = 9 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_DEFAULT_ZH : u32 = 10 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_FILL_MASK : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_FILLED : u32 = 0 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_OPEN : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_SHAPE_MASK : u32 = 7 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_DOT : u32 = 1 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_CIRCLE : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_DOUBLE_CIRCLE : u32 = 3 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_TRIANGLE : u32 = 4 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_SESAME : u32 = 5 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_STRING : u32 = 255 ; pub const NS_STYLE_TEXT_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_TEXT_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_TEXT_RENDERING_OPTIMIZELEGIBILITY : u32 = 2 ; pub const NS_STYLE_TEXT_RENDERING_GEOMETRICPRECISION : u32 = 3 ; pub const NS_STYLE_COLOR_ADJUST_ECONOMY : u32 = 0 ; pub const NS_STYLE_COLOR_ADJUST_EXACT : u32 = 1 ; pub const NS_STYLE_COLOR_INTERPOLATION_AUTO : u32 = 0 ; pub const NS_STYLE_COLOR_INTERPOLATION_SRGB : u32 = 1 ; pub const NS_STYLE_COLOR_INTERPOLATION_LINEARRGB : u32 = 2 ; pub const NS_STYLE_VECTOR_EFFECT_NONE : u32 = 0 ; pub const NS_STYLE_VECTOR_EFFECT_NON_SCALING_STROKE : u32 = 1 ; pub const NS_STYLE_BACKFACE_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_BACKFACE_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_TRANSFORM_STYLE_FLAT : u32 = 0 ; pub const NS_STYLE_TRANSFORM_STYLE_PRESERVE_3D : u32 = 1 ; pub const NS_STYLE_CONTEXT_FILL_OPACITY : u32 = 0 ; pub const NS_STYLE_CONTEXT_STROKE_OPACITY : u32 = 1 ; pub const NS_STYLE_BLEND_NORMAL : u32 = 0 ; pub const NS_STYLE_BLEND_MULTIPLY : u32 = 1 ; pub const NS_STYLE_BLEND_SCREEN : u32 = 2 ; pub const NS_STYLE_BLEND_OVERLAY : u32 = 3 ; pub const NS_STYLE_BLEND_DARKEN : u32 = 4 ; pub const NS_STYLE_BLEND_LIGHTEN : u32 = 5 ; pub const NS_STYLE_BLEND_COLOR_DODGE : u32 = 6 ; pub const NS_STYLE_BLEND_COLOR_BURN : u32 = 7 ; pub const NS_STYLE_BLEND_HARD_LIGHT : u32 = 8 ; pub const NS_STYLE_BLEND_SOFT_LIGHT : u32 = 9 ; pub const NS_STYLE_BLEND_DIFFERENCE : u32 = 10 ; pub const NS_STYLE_BLEND_EXCLUSION : u32 = 11 ; pub const NS_STYLE_BLEND_HUE : u32 = 12 ; pub const NS_STYLE_BLEND_SATURATION : u32 = 13 ; pub const NS_STYLE_BLEND_COLOR : u32 = 14 ; pub const NS_STYLE_BLEND_LUMINOSITY : u32 = 15 ; pub const NS_STYLE_MASK_COMPOSITE_ADD : u32 = 0 ; pub const NS_STYLE_MASK_COMPOSITE_SUBTRACT : u32 = 1 ; pub const NS_STYLE_MASK_COMPOSITE_INTERSECT : u32 = 2 ; pub const NS_STYLE_MASK_COMPOSITE_EXCLUDE : u32 = 3 ; pub const NS_STYLE_CONTROL_CHARACTER_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_CONTROL_CHARACTER_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_COUNTER_SYSTEM_CYCLIC : u32 = 0 ; pub const NS_STYLE_COUNTER_SYSTEM_NUMERIC : u32 = 1 ; pub const NS_STYLE_COUNTER_SYSTEM_ALPHABETIC : u32 = 2 ; pub const NS_STYLE_COUNTER_SYSTEM_SYMBOLIC : u32 = 3 ; pub const NS_STYLE_COUNTER_SYSTEM_ADDITIVE : u32 = 4 ; pub const NS_STYLE_COUNTER_SYSTEM_FIXED : u32 = 5 ; pub const NS_STYLE_COUNTER_SYSTEM_EXTENDS : u32 = 6 ; pub const NS_STYLE_COUNTER_RANGE_INFINITE : u32 = 0 ; pub const NS_STYLE_COUNTER_SPEAKAS_BULLETS : u32 = 0 ; pub const NS_STYLE_COUNTER_SPEAKAS_NUMBERS : u32 = 1 ; pub const NS_STYLE_COUNTER_SPEAKAS_WORDS : u32 = 2 ; pub const NS_STYLE_COUNTER_SPEAKAS_SPELL_OUT : u32 = 3 ; pub const NS_STYLE_COUNTER_SPEAKAS_OTHER : u32 = 255 ; pub const NS_STYLE_SCROLL_BEHAVIOR_AUTO : u32 = 0 ; pub const NS_STYLE_SCROLL_BEHAVIOR_SMOOTH : u32 = 1 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_NONE : u32 = 0 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_MANDATORY : u32 = 1 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_PROXIMITY : u32 = 2 ; pub const CSS_PSEUDO_ELEMENT_IS_CSS2 : u32 = 1 ; pub const CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS : u32 = 2 ; pub const CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE : u32 = 4 ; pub const CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE : u32 = 8 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS : u32 = 16 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME : u32 = 32 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME : u32 = 48 ; pub const CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC : u32 = 64 ; pub const CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM : u32 = 128 ; pub const kNameSpaceID_Unknown : i32 = -1 ; pub const kNameSpaceID_XMLNS : u32 = 1 ; pub const kNameSpaceID_XML : u32 = 2 ; pub const kNameSpaceID_XHTML : u32 = 3 ; pub const kNameSpaceID_XLink : u32 = 4 ; pub const kNameSpaceID_XSLT : u32 = 5 ; pub const kNameSpaceID_XBL : u32 = 6 ; pub const kNameSpaceID_MathML : u32 = 7 ; pub const kNameSpaceID_RDF : u32 = 8 ; pub const kNameSpaceID_XUL : u32 = 9 ; pub const kNameSpaceID_SVG : u32 = 10 ; pub const kNameSpaceID_disabled_MathML : u32 = 11 ; pub const kNameSpaceID_disabled_SVG : u32 = 12 ; pub const kNameSpaceID_LastBuiltin : u32 = 12 ; pub const kNameSpaceID_Wildcard : i32 = -2147483648 ; pub const NS_AUTHOR_SPECIFIED_BACKGROUND : u32 = 1 ; pub const NS_AUTHOR_SPECIFIED_BORDER : u32 = 2 ; pub const NS_AUTHOR_SPECIFIED_PADDING : u32 = 4 ; pub const NS_STYLE_INHERIT_MASK : u32 = 16777215 ; pub const NS_STYLE_HAS_TEXT_DECORATION_LINES : u32 = 16777216 ; pub const NS_STYLE_HAS_PSEUDO_ELEMENT_DATA : u32 = 33554432 ; pub const NS_STYLE_RELEVANT_LINK_VISITED : u32 = 67108864 ; pub const NS_STYLE_IS_STYLE_IF_VISITED : u32 = 134217728 ; pub const NS_STYLE_CHILD_USES_GRANDANCESTOR_STYLE : u32 = 268435456 ; pub const NS_STYLE_IS_SHARED : u32 = 536870912 ; pub const NS_STYLE_IS_GOING_AWAY : u32 = 1073741824 ; pub const NS_STYLE_SUPPRESS_LINEBREAK : u32 = 2147483648 ; pub const NS_STYLE_IN_DISPLAY_NONE_SUBTREE : u64 = 4294967296 ; pub const NS_STYLE_INELIGIBLE_FOR_SHARING : u64 = 8589934592 ; pub const NS_STYLE_HAS_CHILD_THAT_USES_RESET_STYLE : u64 = 17179869184 ; pub const NS_STYLE_IS_TEXT_COMBINED : u64 = 34359738368 ; pub const NS_STYLE_CONTEXT_IS_GECKO : u64 = 68719476736 ; pub const NS_STYLE_CONTEXT_TYPE_SHIFT : u32 = 37 ; pub mod std { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nothrow_t { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nothrow_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nothrow_t > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( nothrow_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nothrow_t > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( nothrow_t ) ) ) ; } impl Clone for nothrow_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct __pair_base { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct pair < _T1 , _T2 > { pub first : _T1 , pub second : _T2 , pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < _T1 > > , pub _phantom_1 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < _T2 > > , } pub type pair_first_type < _T1 > = _T1 ; pub type pair_second_type < _T2 > = _T2 ; pub type pair__PCCP = u8 ; pub type pair__PCCFP = u8 ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct input_iterator_tag { pub _address : u8 , } # [ test ] fn bindgen_test_layout_input_iterator_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < input_iterator_tag > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( input_iterator_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < input_iterator_tag > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( input_iterator_tag ) ) ) ; } impl Clone for input_iterator_tag { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct iterator { pub _address : u8 , } pub type iterator_iterator_category < _Category > = _Category ; pub type iterator_value_type < _Tp > = _Tp ; pub type iterator_difference_type < _Distance > = _Distance ; pub type iterator_pointer < _Pointer > = _Pointer ; pub type iterator_reference < _Reference > = _Reference ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct atomic { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct function { pub _address : u8 , } pub type _Base_bitset__WordT = :: std :: os :: raw :: c_ulong ; pub type bitset__Base = u8 ; pub type bitset__WordT = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct bitset_reference { pub _M_wp : * mut root::std::bitset__WordT , pub _M_bpos : usize , } } pub mod __gnu_cxx { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; } pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub mod mozilla { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; pub type fallible_t = root::std::nothrow_t ; pub type IntegralConstant_ValueType < T > = T ; pub type IntegralConstant_Type = u8 ; 
+ # [ repr ( C ) ] pub struct __BindgenUnionField < T > ( :: std :: marker :: PhantomData < T > ) ; impl < T > __BindgenUnionField < T > { # [ inline ] pub fn new ( ) -> Self { __BindgenUnionField ( :: std :: marker :: PhantomData ) } # [ inline ] pub unsafe fn as_ref ( & self ) -> & T { :: std :: mem :: transmute ( self ) } # [ inline ] pub unsafe fn as_mut ( & mut self ) -> & mut T { :: std :: mem :: transmute ( self ) } } impl < T > :: std :: default :: Default for __BindgenUnionField < T > { # [ inline ] fn default ( ) -> Self { Self :: new ( ) } } impl < T > :: std :: clone :: Clone for __BindgenUnionField < T > { # [ inline ] fn clone ( & self ) -> Self { Self :: new ( ) } } impl < T > :: std :: marker :: Copy for __BindgenUnionField < T > { } impl < T > :: std :: fmt :: Debug for __BindgenUnionField < T > { fn fmt ( & self , fmt : & mut :: std :: fmt :: Formatter ) -> :: std :: fmt :: Result { fmt . write_str ( "__BindgenUnionField" ) } } impl < T > :: std :: hash :: Hash for __BindgenUnionField < T > { fn hash < H : :: std :: hash :: Hasher > ( & self , _state : & mut H ) { } } impl < T > :: std :: cmp :: PartialEq for __BindgenUnionField < T > { fn eq ( & self , _other : & __BindgenUnionField < T > ) -> bool { true } } impl < T > :: std :: cmp :: Eq for __BindgenUnionField < T > { } # [ allow ( unused_imports ) ] use self :: super :: root ; pub const NS_FONT_STYLE_NORMAL : u32 = 0 ; pub const NS_FONT_STYLE_ITALIC : u32 = 1 ; pub const NS_FONT_STYLE_OBLIQUE : u32 = 2 ; pub const NS_FONT_WEIGHT_NORMAL : u32 = 400 ; pub const NS_FONT_WEIGHT_BOLD : u32 = 700 ; pub const NS_FONT_WEIGHT_THIN : u32 = 100 ; pub const NS_FONT_STRETCH_ULTRA_CONDENSED : i32 = -4 ; pub const NS_FONT_STRETCH_EXTRA_CONDENSED : i32 = -3 ; pub const NS_FONT_STRETCH_CONDENSED : i32 = -2 ; pub const NS_FONT_STRETCH_SEMI_CONDENSED : i32 = -1 ; pub const NS_FONT_STRETCH_NORMAL : u32 = 0 ; pub const NS_FONT_STRETCH_SEMI_EXPANDED : u32 = 1 ; pub const NS_FONT_STRETCH_EXPANDED : u32 = 2 ; pub const NS_FONT_STRETCH_EXTRA_EXPANDED : u32 = 3 ; pub const NS_FONT_STRETCH_ULTRA_EXPANDED : u32 = 4 ; pub const NS_FONT_SMOOTHING_AUTO : u32 = 0 ; pub const NS_FONT_SMOOTHING_GRAYSCALE : u32 = 1 ; pub const NS_FONT_KERNING_AUTO : u32 = 0 ; pub const NS_FONT_KERNING_NONE : u32 = 1 ; pub const NS_FONT_KERNING_NORMAL : u32 = 2 ; pub const NS_FONT_SYNTHESIS_WEIGHT : u32 = 1 ; pub const NS_FONT_SYNTHESIS_STYLE : u32 = 2 ; pub const NS_FONT_DISPLAY_AUTO : u32 = 0 ; pub const NS_FONT_DISPLAY_BLOCK : u32 = 1 ; pub const NS_FONT_DISPLAY_SWAP : u32 = 2 ; pub const NS_FONT_DISPLAY_FALLBACK : u32 = 3 ; pub const NS_FONT_DISPLAY_OPTIONAL : u32 = 4 ; pub const NS_FONT_OPTICAL_SIZING_AUTO : u32 = 0 ; pub const NS_FONT_OPTICAL_SIZING_NONE : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_ALTERNATES_HISTORICAL : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_STYLISTIC : u32 = 2 ; pub const NS_FONT_VARIANT_ALTERNATES_STYLESET : u32 = 4 ; pub const NS_FONT_VARIANT_ALTERNATES_CHARACTER_VARIANT : u32 = 8 ; pub const NS_FONT_VARIANT_ALTERNATES_SWASH : u32 = 16 ; pub const NS_FONT_VARIANT_ALTERNATES_ORNAMENTS : u32 = 32 ; pub const NS_FONT_VARIANT_ALTERNATES_ANNOTATION : u32 = 64 ; pub const NS_FONT_VARIANT_ALTERNATES_COUNT : u32 = 7 ; pub const NS_FONT_VARIANT_ALTERNATES_ENUMERATED_MASK : u32 = 1 ; pub const NS_FONT_VARIANT_ALTERNATES_FUNCTIONAL_MASK : u32 = 126 ; pub const NS_FONT_VARIANT_CAPS_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_CAPS_SMALLCAPS : u32 = 1 ; pub const NS_FONT_VARIANT_CAPS_ALLSMALL : u32 = 2 ; pub const NS_FONT_VARIANT_CAPS_PETITECAPS : u32 = 3 ; pub const NS_FONT_VARIANT_CAPS_ALLPETITE : u32 = 4 ; pub const NS_FONT_VARIANT_CAPS_TITLING : u32 = 5 ; pub const NS_FONT_VARIANT_CAPS_UNICASE : u32 = 6 ; pub const NS_FONT_VARIANT_EAST_ASIAN_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS78 : u32 = 1 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS83 : u32 = 2 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS90 : u32 = 4 ; pub const NS_FONT_VARIANT_EAST_ASIAN_JIS04 : u32 = 8 ; pub const NS_FONT_VARIANT_EAST_ASIAN_SIMPLIFIED : u32 = 16 ; pub const NS_FONT_VARIANT_EAST_ASIAN_TRADITIONAL : u32 = 32 ; pub const NS_FONT_VARIANT_EAST_ASIAN_FULL_WIDTH : u32 = 64 ; pub const NS_FONT_VARIANT_EAST_ASIAN_PROP_WIDTH : u32 = 128 ; pub const NS_FONT_VARIANT_EAST_ASIAN_RUBY : u32 = 256 ; pub const NS_FONT_VARIANT_EAST_ASIAN_COUNT : u32 = 9 ; pub const NS_FONT_VARIANT_EAST_ASIAN_VARIANT_MASK : u32 = 63 ; pub const NS_FONT_VARIANT_EAST_ASIAN_WIDTH_MASK : u32 = 192 ; pub const NS_FONT_VARIANT_LIGATURES_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_LIGATURES_NONE : u32 = 1 ; pub const NS_FONT_VARIANT_LIGATURES_COMMON : u32 = 2 ; pub const NS_FONT_VARIANT_LIGATURES_NO_COMMON : u32 = 4 ; pub const NS_FONT_VARIANT_LIGATURES_DISCRETIONARY : u32 = 8 ; pub const NS_FONT_VARIANT_LIGATURES_NO_DISCRETIONARY : u32 = 16 ; pub const NS_FONT_VARIANT_LIGATURES_HISTORICAL : u32 = 32 ; pub const NS_FONT_VARIANT_LIGATURES_NO_HISTORICAL : u32 = 64 ; pub const NS_FONT_VARIANT_LIGATURES_CONTEXTUAL : u32 = 128 ; pub const NS_FONT_VARIANT_LIGATURES_NO_CONTEXTUAL : u32 = 256 ; pub const NS_FONT_VARIANT_LIGATURES_COUNT : u32 = 9 ; pub const NS_FONT_VARIANT_LIGATURES_COMMON_MASK : u32 = 6 ; pub const NS_FONT_VARIANT_LIGATURES_DISCRETIONARY_MASK : u32 = 24 ; pub const NS_FONT_VARIANT_LIGATURES_HISTORICAL_MASK : u32 = 96 ; pub const NS_FONT_VARIANT_LIGATURES_CONTEXTUAL_MASK : u32 = 384 ; pub const NS_FONT_VARIANT_NUMERIC_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_NUMERIC_LINING : u32 = 1 ; pub const NS_FONT_VARIANT_NUMERIC_OLDSTYLE : u32 = 2 ; pub const NS_FONT_VARIANT_NUMERIC_PROPORTIONAL : u32 = 4 ; pub const NS_FONT_VARIANT_NUMERIC_TABULAR : u32 = 8 ; pub const NS_FONT_VARIANT_NUMERIC_DIAGONAL_FRACTIONS : u32 = 16 ; pub const NS_FONT_VARIANT_NUMERIC_STACKED_FRACTIONS : u32 = 32 ; pub const NS_FONT_VARIANT_NUMERIC_SLASHZERO : u32 = 64 ; pub const NS_FONT_VARIANT_NUMERIC_ORDINAL : u32 = 128 ; pub const NS_FONT_VARIANT_NUMERIC_COUNT : u32 = 8 ; pub const NS_FONT_VARIANT_NUMERIC_FIGURE_MASK : u32 = 3 ; pub const NS_FONT_VARIANT_NUMERIC_SPACING_MASK : u32 = 12 ; pub const NS_FONT_VARIANT_NUMERIC_FRACTION_MASK : u32 = 48 ; pub const NS_FONT_VARIANT_POSITION_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_POSITION_SUPER : u32 = 1 ; pub const NS_FONT_VARIANT_POSITION_SUB : u32 = 2 ; pub const NS_FONT_VARIANT_WIDTH_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_WIDTH_FULL : u32 = 1 ; pub const NS_FONT_VARIANT_WIDTH_HALF : u32 = 2 ; pub const NS_FONT_VARIANT_WIDTH_THIRD : u32 = 3 ; pub const NS_FONT_VARIANT_WIDTH_QUARTER : u32 = 4 ; pub const NS_FONT_SUBSCRIPT_OFFSET_RATIO : f64 = 0.2 ; pub const NS_FONT_SUPERSCRIPT_OFFSET_RATIO : f64 = 0.34 ; pub const NS_FONT_SUB_SUPER_SIZE_RATIO_SMALL : f64 = 0.82 ; pub const NS_FONT_SUB_SUPER_SIZE_RATIO_LARGE : f64 = 0.667 ; pub const NS_FONT_SUB_SUPER_SMALL_SIZE : f64 = 20.0 ; pub const NS_FONT_SUB_SUPER_LARGE_SIZE : f64 = 45.0 ; pub const NS_FONT_VARIANT_NORMAL : u32 = 0 ; pub const NS_FONT_VARIANT_SMALL_CAPS : u32 = 1 ; pub const NS_STYLE_COLOR_INHERIT_FROM_BODY : u32 = 2 ; pub const NS_STYLE_WILL_CHANGE_STACKING_CONTEXT : u32 = 1 ; pub const NS_STYLE_WILL_CHANGE_TRANSFORM : u32 = 2 ; pub const NS_STYLE_WILL_CHANGE_SCROLL : u32 = 4 ; pub const NS_STYLE_WILL_CHANGE_OPACITY : u32 = 8 ; pub const NS_STYLE_WILL_CHANGE_FIXPOS_CB : u32 = 16 ; pub const NS_STYLE_WILL_CHANGE_ABSPOS_CB : u32 = 32 ; pub const NS_STYLE_ANIMATION_ITERATION_COUNT_INFINITE : u32 = 0 ; pub const NS_STYLE_ANIMATION_PLAY_STATE_RUNNING : u32 = 0 ; pub const NS_STYLE_ANIMATION_PLAY_STATE_PAUSED : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_SCROLL : u32 = 0 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_FIXED : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_ATTACHMENT_LOCAL : u32 = 2 ; pub const NS_STYLE_IMAGELAYER_CLIP_MOZ_ALMOST_PADDING : u32 = 127 ; pub const NS_STYLE_IMAGELAYER_POSITION_CENTER : u32 = 1 ; pub const NS_STYLE_IMAGELAYER_POSITION_TOP : u32 = 2 ; pub const NS_STYLE_IMAGELAYER_POSITION_BOTTOM : u32 = 4 ; pub const NS_STYLE_IMAGELAYER_POSITION_LEFT : u32 = 8 ; pub const NS_STYLE_IMAGELAYER_POSITION_RIGHT : u32 = 16 ; pub const NS_STYLE_IMAGELAYER_SIZE_CONTAIN : u32 = 0 ; pub const NS_STYLE_IMAGELAYER_SIZE_COVER : u32 = 1 ; pub const NS_STYLE_MASK_MODE_ALPHA : u32 = 0 ; pub const NS_STYLE_MASK_MODE_LUMINANCE : u32 = 1 ; pub const NS_STYLE_MASK_MODE_MATCH_SOURCE : u32 = 2 ; pub const NS_STYLE_BG_INLINE_POLICY_EACH_BOX : u32 = 0 ; pub const NS_STYLE_BG_INLINE_POLICY_CONTINUOUS : u32 = 1 ; pub const NS_STYLE_BG_INLINE_POLICY_BOUNDING_BOX : u32 = 2 ; pub const NS_STYLE_BORDER_COLLAPSE : u32 = 0 ; pub const NS_STYLE_BORDER_SEPARATE : u32 = 1 ; pub const NS_STYLE_BORDER_WIDTH_THIN : u32 = 0 ; pub const NS_STYLE_BORDER_WIDTH_MEDIUM : u32 = 1 ; pub const NS_STYLE_BORDER_WIDTH_THICK : u32 = 2 ; pub const NS_STYLE_BORDER_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_BORDER_STYLE_GROOVE : u32 = 1 ; pub const NS_STYLE_BORDER_STYLE_RIDGE : u32 = 2 ; pub const NS_STYLE_BORDER_STYLE_DOTTED : u32 = 3 ; pub const NS_STYLE_BORDER_STYLE_DASHED : u32 = 4 ; pub const NS_STYLE_BORDER_STYLE_SOLID : u32 = 5 ; pub const NS_STYLE_BORDER_STYLE_DOUBLE : u32 = 6 ; pub const NS_STYLE_BORDER_STYLE_INSET : u32 = 7 ; pub const NS_STYLE_BORDER_STYLE_OUTSET : u32 = 8 ; pub const NS_STYLE_BORDER_STYLE_HIDDEN : u32 = 9 ; pub const NS_STYLE_BORDER_STYLE_AUTO : u32 = 10 ; pub const NS_STYLE_BORDER_IMAGE_SLICE_NOFILL : u32 = 0 ; pub const NS_STYLE_BORDER_IMAGE_SLICE_FILL : u32 = 1 ; pub const NS_STYLE_CURSOR_AUTO : u32 = 1 ; pub const NS_STYLE_CURSOR_CROSSHAIR : u32 = 2 ; pub const NS_STYLE_CURSOR_DEFAULT : u32 = 3 ; pub const NS_STYLE_CURSOR_POINTER : u32 = 4 ; pub const NS_STYLE_CURSOR_MOVE : u32 = 5 ; pub const NS_STYLE_CURSOR_E_RESIZE : u32 = 6 ; pub const NS_STYLE_CURSOR_NE_RESIZE : u32 = 7 ; pub const NS_STYLE_CURSOR_NW_RESIZE : u32 = 8 ; pub const NS_STYLE_CURSOR_N_RESIZE : u32 = 9 ; pub const NS_STYLE_CURSOR_SE_RESIZE : u32 = 10 ; pub const NS_STYLE_CURSOR_SW_RESIZE : u32 = 11 ; pub const NS_STYLE_CURSOR_S_RESIZE : u32 = 12 ; pub const NS_STYLE_CURSOR_W_RESIZE : u32 = 13 ; pub const NS_STYLE_CURSOR_TEXT : u32 = 14 ; pub const NS_STYLE_CURSOR_WAIT : u32 = 15 ; pub const NS_STYLE_CURSOR_HELP : u32 = 16 ; pub const NS_STYLE_CURSOR_COPY : u32 = 17 ; pub const NS_STYLE_CURSOR_ALIAS : u32 = 18 ; pub const NS_STYLE_CURSOR_CONTEXT_MENU : u32 = 19 ; pub const NS_STYLE_CURSOR_CELL : u32 = 20 ; pub const NS_STYLE_CURSOR_GRAB : u32 = 21 ; pub const NS_STYLE_CURSOR_GRABBING : u32 = 22 ; pub const NS_STYLE_CURSOR_SPINNING : u32 = 23 ; pub const NS_STYLE_CURSOR_ZOOM_IN : u32 = 24 ; pub const NS_STYLE_CURSOR_ZOOM_OUT : u32 = 25 ; pub const NS_STYLE_CURSOR_NOT_ALLOWED : u32 = 26 ; pub const NS_STYLE_CURSOR_COL_RESIZE : u32 = 27 ; pub const NS_STYLE_CURSOR_ROW_RESIZE : u32 = 28 ; pub const NS_STYLE_CURSOR_NO_DROP : u32 = 29 ; pub const NS_STYLE_CURSOR_VERTICAL_TEXT : u32 = 30 ; pub const NS_STYLE_CURSOR_ALL_SCROLL : u32 = 31 ; pub const NS_STYLE_CURSOR_NESW_RESIZE : u32 = 32 ; pub const NS_STYLE_CURSOR_NWSE_RESIZE : u32 = 33 ; pub const NS_STYLE_CURSOR_NS_RESIZE : u32 = 34 ; pub const NS_STYLE_CURSOR_EW_RESIZE : u32 = 35 ; pub const NS_STYLE_CURSOR_NONE : u32 = 36 ; pub const NS_STYLE_DIRECTION_LTR : u32 = 0 ; pub const NS_STYLE_DIRECTION_RTL : u32 = 1 ; pub const NS_STYLE_WRITING_MODE_HORIZONTAL_TB : u32 = 0 ; pub const NS_STYLE_WRITING_MODE_VERTICAL_RL : u32 = 1 ; pub const NS_STYLE_WRITING_MODE_VERTICAL_LR : u32 = 3 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_MASK : u32 = 4 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_RL : u32 = 5 ; pub const NS_STYLE_WRITING_MODE_SIDEWAYS_LR : u32 = 7 ; pub const NS_STYLE_CONTAIN_NONE : u32 = 0 ; pub const NS_STYLE_CONTAIN_STRICT : u32 = 1 ; pub const NS_STYLE_CONTAIN_LAYOUT : u32 = 2 ; pub const NS_STYLE_CONTAIN_STYLE : u32 = 4 ; pub const NS_STYLE_CONTAIN_PAINT : u32 = 8 ; pub const NS_STYLE_CONTAIN_ALL_BITS : u32 = 14 ; pub const NS_STYLE_ALIGN_AUTO : u32 = 0 ; pub const NS_STYLE_ALIGN_NORMAL : u32 = 1 ; pub const NS_STYLE_ALIGN_START : u32 = 2 ; pub const NS_STYLE_ALIGN_END : u32 = 3 ; pub const NS_STYLE_ALIGN_FLEX_START : u32 = 4 ; pub const NS_STYLE_ALIGN_FLEX_END : u32 = 5 ; pub const NS_STYLE_ALIGN_CENTER : u32 = 6 ; pub const NS_STYLE_ALIGN_LEFT : u32 = 7 ; pub const NS_STYLE_ALIGN_RIGHT : u32 = 8 ; pub const NS_STYLE_ALIGN_BASELINE : u32 = 9 ; pub const NS_STYLE_ALIGN_LAST_BASELINE : u32 = 10 ; pub const NS_STYLE_ALIGN_STRETCH : u32 = 11 ; pub const NS_STYLE_ALIGN_SELF_START : u32 = 12 ; pub const NS_STYLE_ALIGN_SELF_END : u32 = 13 ; pub const NS_STYLE_ALIGN_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_ALIGN_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_ALIGN_SPACE_EVENLY : u32 = 16 ; pub const NS_STYLE_ALIGN_LEGACY : u32 = 32 ; pub const NS_STYLE_ALIGN_SAFE : u32 = 64 ; pub const NS_STYLE_ALIGN_UNSAFE : u32 = 128 ; pub const NS_STYLE_ALIGN_FLAG_BITS : u32 = 224 ; pub const NS_STYLE_ALIGN_ALL_BITS : u32 = 255 ; pub const NS_STYLE_ALIGN_ALL_SHIFT : u32 = 8 ; pub const NS_STYLE_JUSTIFY_AUTO : u32 = 0 ; pub const NS_STYLE_JUSTIFY_NORMAL : u32 = 1 ; pub const NS_STYLE_JUSTIFY_START : u32 = 2 ; pub const NS_STYLE_JUSTIFY_END : u32 = 3 ; pub const NS_STYLE_JUSTIFY_FLEX_START : u32 = 4 ; pub const NS_STYLE_JUSTIFY_FLEX_END : u32 = 5 ; pub const NS_STYLE_JUSTIFY_CENTER : u32 = 6 ; pub const NS_STYLE_JUSTIFY_LEFT : u32 = 7 ; pub const NS_STYLE_JUSTIFY_RIGHT : u32 = 8 ; pub const NS_STYLE_JUSTIFY_BASELINE : u32 = 9 ; pub const NS_STYLE_JUSTIFY_LAST_BASELINE : u32 = 10 ; pub const NS_STYLE_JUSTIFY_STRETCH : u32 = 11 ; pub const NS_STYLE_JUSTIFY_SELF_START : u32 = 12 ; pub const NS_STYLE_JUSTIFY_SELF_END : u32 = 13 ; pub const NS_STYLE_JUSTIFY_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_JUSTIFY_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_JUSTIFY_SPACE_EVENLY : u32 = 16 ; pub const NS_STYLE_JUSTIFY_LEGACY : u32 = 32 ; pub const NS_STYLE_JUSTIFY_SAFE : u32 = 64 ; pub const NS_STYLE_JUSTIFY_UNSAFE : u32 = 128 ; pub const NS_STYLE_JUSTIFY_FLAG_BITS : u32 = 224 ; pub const NS_STYLE_JUSTIFY_ALL_BITS : u32 = 255 ; pub const NS_STYLE_JUSTIFY_ALL_SHIFT : u32 = 8 ; pub const NS_STYLE_FLEX_DIRECTION_ROW : u32 = 0 ; pub const NS_STYLE_FLEX_DIRECTION_ROW_REVERSE : u32 = 1 ; pub const NS_STYLE_FLEX_DIRECTION_COLUMN : u32 = 2 ; pub const NS_STYLE_FLEX_DIRECTION_COLUMN_REVERSE : u32 = 3 ; pub const NS_STYLE_FLEX_WRAP_NOWRAP : u32 = 0 ; pub const NS_STYLE_FLEX_WRAP_WRAP : u32 = 1 ; pub const NS_STYLE_FLEX_WRAP_WRAP_REVERSE : u32 = 2 ; pub const NS_STYLE_ORDER_INITIAL : u32 = 0 ; pub const NS_STYLE_JUSTIFY_CONTENT_FLEX_START : u32 = 4 ; pub const NS_STYLE_JUSTIFY_CONTENT_FLEX_END : u32 = 5 ; pub const NS_STYLE_JUSTIFY_CONTENT_CENTER : u32 = 6 ; pub const NS_STYLE_JUSTIFY_CONTENT_SPACE_BETWEEN : u32 = 14 ; pub const NS_STYLE_JUSTIFY_CONTENT_SPACE_AROUND : u32 = 15 ; pub const NS_STYLE_FILTER_NONE : u32 = 0 ; pub const NS_STYLE_FILTER_URL : u32 = 1 ; pub const NS_STYLE_FILTER_BLUR : u32 = 2 ; pub const NS_STYLE_FILTER_BRIGHTNESS : u32 = 3 ; pub const NS_STYLE_FILTER_CONTRAST : u32 = 4 ; pub const NS_STYLE_FILTER_GRAYSCALE : u32 = 5 ; pub const NS_STYLE_FILTER_INVERT : u32 = 6 ; pub const NS_STYLE_FILTER_OPACITY : u32 = 7 ; pub const NS_STYLE_FILTER_SATURATE : u32 = 8 ; pub const NS_STYLE_FILTER_SEPIA : u32 = 9 ; pub const NS_STYLE_FILTER_HUE_ROTATE : u32 = 10 ; pub const NS_STYLE_FILTER_DROP_SHADOW : u32 = 11 ; pub const NS_STYLE_FONT_STYLE_NORMAL : u32 = 0 ; pub const NS_STYLE_FONT_STYLE_ITALIC : u32 = 1 ; pub const NS_STYLE_FONT_STYLE_OBLIQUE : u32 = 2 ; pub const NS_STYLE_FONT_WEIGHT_NORMAL : u32 = 400 ; pub const NS_STYLE_FONT_WEIGHT_BOLD : u32 = 700 ; pub const NS_STYLE_FONT_WEIGHT_BOLDER : i32 = -1 ; pub const NS_STYLE_FONT_WEIGHT_LIGHTER : i32 = -2 ; pub const NS_STYLE_FONT_SIZE_XXSMALL : u32 = 0 ; pub const NS_STYLE_FONT_SIZE_XSMALL : u32 = 1 ; pub const NS_STYLE_FONT_SIZE_SMALL : u32 = 2 ; pub const NS_STYLE_FONT_SIZE_MEDIUM : u32 = 3 ; pub const NS_STYLE_FONT_SIZE_LARGE : u32 = 4 ; pub const NS_STYLE_FONT_SIZE_XLARGE : u32 = 5 ; pub const NS_STYLE_FONT_SIZE_XXLARGE : u32 = 6 ; pub const NS_STYLE_FONT_SIZE_XXXLARGE : u32 = 7 ; pub const NS_STYLE_FONT_SIZE_LARGER : u32 = 8 ; pub const NS_STYLE_FONT_SIZE_SMALLER : u32 = 9 ; pub const NS_STYLE_FONT_SIZE_NO_KEYWORD : u32 = 10 ; pub const NS_STYLE_FONT_STRETCH_ULTRA_CONDENSED : i32 = -4 ; pub const NS_STYLE_FONT_STRETCH_EXTRA_CONDENSED : i32 = -3 ; pub const NS_STYLE_FONT_STRETCH_CONDENSED : i32 = -2 ; pub const NS_STYLE_FONT_STRETCH_SEMI_CONDENSED : i32 = -1 ; pub const NS_STYLE_FONT_STRETCH_NORMAL : u32 = 0 ; pub const NS_STYLE_FONT_STRETCH_SEMI_EXPANDED : u32 = 1 ; pub const NS_STYLE_FONT_STRETCH_EXPANDED : u32 = 2 ; pub const NS_STYLE_FONT_STRETCH_EXTRA_EXPANDED : u32 = 3 ; pub const NS_STYLE_FONT_STRETCH_ULTRA_EXPANDED : u32 = 4 ; pub const NS_STYLE_FONT_CAPTION : u32 = 1 ; pub const NS_STYLE_FONT_ICON : u32 = 2 ; pub const NS_STYLE_FONT_MENU : u32 = 3 ; pub const NS_STYLE_FONT_MESSAGE_BOX : u32 = 4 ; pub const NS_STYLE_FONT_SMALL_CAPTION : u32 = 5 ; pub const NS_STYLE_FONT_STATUS_BAR : u32 = 6 ; pub const NS_STYLE_FONT_WINDOW : u32 = 7 ; pub const NS_STYLE_FONT_DOCUMENT : u32 = 8 ; pub const NS_STYLE_FONT_WORKSPACE : u32 = 9 ; pub const NS_STYLE_FONT_DESKTOP : u32 = 10 ; pub const NS_STYLE_FONT_INFO : u32 = 11 ; pub const NS_STYLE_FONT_DIALOG : u32 = 12 ; pub const NS_STYLE_FONT_BUTTON : u32 = 13 ; pub const NS_STYLE_FONT_PULL_DOWN_MENU : u32 = 14 ; pub const NS_STYLE_FONT_LIST : u32 = 15 ; pub const NS_STYLE_FONT_FIELD : u32 = 16 ; pub const NS_STYLE_GRID_AUTO_FLOW_ROW : u32 = 1 ; pub const NS_STYLE_GRID_AUTO_FLOW_COLUMN : u32 = 2 ; pub const NS_STYLE_GRID_AUTO_FLOW_DENSE : u32 = 4 ; pub const NS_STYLE_GRID_TEMPLATE_SUBGRID : u32 = 0 ; pub const NS_STYLE_GRID_REPEAT_AUTO_FILL : u32 = 0 ; pub const NS_STYLE_GRID_REPEAT_AUTO_FIT : u32 = 1 ; pub const NS_MATHML_DEFAULT_SCRIPT_SIZE_MULTIPLIER : f64 = 0.71 ; pub const NS_MATHML_DEFAULT_SCRIPT_MIN_SIZE_PT : u32 = 8 ; pub const NS_MATHML_MATHVARIANT_NONE : u32 = 0 ; pub const NS_MATHML_MATHVARIANT_NORMAL : u32 = 1 ; pub const NS_MATHML_MATHVARIANT_BOLD : u32 = 2 ; pub const NS_MATHML_MATHVARIANT_ITALIC : u32 = 3 ; pub const NS_MATHML_MATHVARIANT_BOLD_ITALIC : u32 = 4 ; pub const NS_MATHML_MATHVARIANT_SCRIPT : u32 = 5 ; pub const NS_MATHML_MATHVARIANT_BOLD_SCRIPT : u32 = 6 ; pub const NS_MATHML_MATHVARIANT_FRAKTUR : u32 = 7 ; pub const NS_MATHML_MATHVARIANT_DOUBLE_STRUCK : u32 = 8 ; pub const NS_MATHML_MATHVARIANT_BOLD_FRAKTUR : u32 = 9 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF : u32 = 10 ; pub const NS_MATHML_MATHVARIANT_BOLD_SANS_SERIF : u32 = 11 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF_ITALIC : u32 = 12 ; pub const NS_MATHML_MATHVARIANT_SANS_SERIF_BOLD_ITALIC : u32 = 13 ; pub const NS_MATHML_MATHVARIANT_MONOSPACE : u32 = 14 ; pub const NS_MATHML_MATHVARIANT_INITIAL : u32 = 15 ; pub const NS_MATHML_MATHVARIANT_TAILED : u32 = 16 ; pub const NS_MATHML_MATHVARIANT_LOOPED : u32 = 17 ; pub const NS_MATHML_MATHVARIANT_STRETCHED : u32 = 18 ; pub const NS_MATHML_DISPLAYSTYLE_INLINE : u32 = 0 ; pub const NS_MATHML_DISPLAYSTYLE_BLOCK : u32 = 1 ; pub const NS_STYLE_WIDTH_MAX_CONTENT : u32 = 0 ; pub const NS_STYLE_WIDTH_MIN_CONTENT : u32 = 1 ; pub const NS_STYLE_WIDTH_FIT_CONTENT : u32 = 2 ; pub const NS_STYLE_WIDTH_AVAILABLE : u32 = 3 ; pub const NS_STYLE_POSITION_STATIC : u32 = 0 ; pub const NS_STYLE_POSITION_RELATIVE : u32 = 1 ; pub const NS_STYLE_POSITION_ABSOLUTE : u32 = 2 ; pub const NS_STYLE_POSITION_FIXED : u32 = 3 ; pub const NS_STYLE_POSITION_STICKY : u32 = 4 ; pub const NS_STYLE_CLIP_AUTO : u32 = 0 ; pub const NS_STYLE_CLIP_RECT : u32 = 1 ; pub const NS_STYLE_CLIP_TYPE_MASK : u32 = 15 ; pub const NS_STYLE_CLIP_LEFT_AUTO : u32 = 16 ; pub const NS_STYLE_CLIP_TOP_AUTO : u32 = 32 ; pub const NS_STYLE_CLIP_RIGHT_AUTO : u32 = 64 ; pub const NS_STYLE_CLIP_BOTTOM_AUTO : u32 = 128 ; pub const NS_STYLE_FRAME_YES : u32 = 0 ; pub const NS_STYLE_FRAME_NO : u32 = 1 ; pub const NS_STYLE_FRAME_0 : u32 = 2 ; pub const NS_STYLE_FRAME_1 : u32 = 3 ; pub const NS_STYLE_FRAME_ON : u32 = 4 ; pub const NS_STYLE_FRAME_OFF : u32 = 5 ; pub const NS_STYLE_FRAME_AUTO : u32 = 6 ; pub const NS_STYLE_FRAME_SCROLL : u32 = 7 ; pub const NS_STYLE_FRAME_NOSCROLL : u32 = 8 ; pub const NS_STYLE_OVERFLOW_VISIBLE : u32 = 0 ; pub const NS_STYLE_OVERFLOW_HIDDEN : u32 = 1 ; pub const NS_STYLE_OVERFLOW_SCROLL : u32 = 2 ; pub const NS_STYLE_OVERFLOW_AUTO : u32 = 3 ; pub const NS_STYLE_OVERFLOW_CLIP : u32 = 4 ; pub const NS_STYLE_OVERFLOW_SCROLLBARS_HORIZONTAL : u32 = 5 ; pub const NS_STYLE_OVERFLOW_SCROLLBARS_VERTICAL : u32 = 6 ; pub const NS_STYLE_OVERFLOW_CLIP_BOX_PADDING_BOX : u32 = 0 ; pub const NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX : u32 = 1 ; pub const NS_STYLE_LIST_STYLE_CUSTOM : i32 = -1 ; pub const NS_STYLE_LIST_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_LIST_STYLE_DECIMAL : u32 = 1 ; pub const NS_STYLE_LIST_STYLE_DISC : u32 = 2 ; pub const NS_STYLE_LIST_STYLE_CIRCLE : u32 = 3 ; pub const NS_STYLE_LIST_STYLE_SQUARE : u32 = 4 ; pub const NS_STYLE_LIST_STYLE_DISCLOSURE_CLOSED : u32 = 5 ; pub const NS_STYLE_LIST_STYLE_DISCLOSURE_OPEN : u32 = 6 ; pub const NS_STYLE_LIST_STYLE_HEBREW : u32 = 7 ; pub const NS_STYLE_LIST_STYLE_JAPANESE_INFORMAL : u32 = 8 ; pub const NS_STYLE_LIST_STYLE_JAPANESE_FORMAL : u32 = 9 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANGUL_FORMAL : u32 = 10 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANJA_INFORMAL : u32 = 11 ; pub const NS_STYLE_LIST_STYLE_KOREAN_HANJA_FORMAL : u32 = 12 ; pub const NS_STYLE_LIST_STYLE_SIMP_CHINESE_INFORMAL : u32 = 13 ; pub const NS_STYLE_LIST_STYLE_SIMP_CHINESE_FORMAL : u32 = 14 ; pub const NS_STYLE_LIST_STYLE_TRAD_CHINESE_INFORMAL : u32 = 15 ; pub const NS_STYLE_LIST_STYLE_TRAD_CHINESE_FORMAL : u32 = 16 ; pub const NS_STYLE_LIST_STYLE_ETHIOPIC_NUMERIC : u32 = 17 ; pub const NS_STYLE_LIST_STYLE_LOWER_ROMAN : u32 = 100 ; pub const NS_STYLE_LIST_STYLE_UPPER_ROMAN : u32 = 101 ; pub const NS_STYLE_LIST_STYLE_LOWER_ALPHA : u32 = 102 ; pub const NS_STYLE_LIST_STYLE_UPPER_ALPHA : u32 = 103 ; pub const NS_STYLE_LIST_STYLE_POSITION_INSIDE : u32 = 0 ; pub const NS_STYLE_LIST_STYLE_POSITION_OUTSIDE : u32 = 1 ; pub const NS_STYLE_MARGIN_SIZE_AUTO : u32 = 0 ; pub const NS_STYLE_POINTER_EVENTS_NONE : u32 = 0 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLEPAINTED : u32 = 1 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLEFILL : u32 = 2 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLESTROKE : u32 = 3 ; pub const NS_STYLE_POINTER_EVENTS_VISIBLE : u32 = 4 ; pub const NS_STYLE_POINTER_EVENTS_PAINTED : u32 = 5 ; pub const NS_STYLE_POINTER_EVENTS_FILL : u32 = 6 ; pub const NS_STYLE_POINTER_EVENTS_STROKE : u32 = 7 ; pub const NS_STYLE_POINTER_EVENTS_ALL : u32 = 8 ; pub const NS_STYLE_POINTER_EVENTS_AUTO : u32 = 9 ; pub const NS_STYLE_IMAGE_ORIENTATION_FLIP : u32 = 0 ; pub const NS_STYLE_IMAGE_ORIENTATION_FROM_IMAGE : u32 = 1 ; pub const NS_STYLE_ISOLATION_AUTO : u32 = 0 ; pub const NS_STYLE_ISOLATION_ISOLATE : u32 = 1 ; pub const NS_STYLE_OBJECT_FIT_FILL : u32 = 0 ; pub const NS_STYLE_OBJECT_FIT_CONTAIN : u32 = 1 ; pub const NS_STYLE_OBJECT_FIT_COVER : u32 = 2 ; pub const NS_STYLE_OBJECT_FIT_NONE : u32 = 3 ; pub const NS_STYLE_OBJECT_FIT_SCALE_DOWN : u32 = 4 ; pub const NS_STYLE_RESIZE_NONE : u32 = 0 ; pub const NS_STYLE_RESIZE_BOTH : u32 = 1 ; pub const NS_STYLE_RESIZE_HORIZONTAL : u32 = 2 ; pub const NS_STYLE_RESIZE_VERTICAL : u32 = 3 ; pub const NS_STYLE_TEXT_ALIGN_START : u32 = 0 ; pub const NS_STYLE_TEXT_ALIGN_LEFT : u32 = 1 ; pub const NS_STYLE_TEXT_ALIGN_RIGHT : u32 = 2 ; pub const NS_STYLE_TEXT_ALIGN_CENTER : u32 = 3 ; pub const NS_STYLE_TEXT_ALIGN_JUSTIFY : u32 = 4 ; pub const NS_STYLE_TEXT_ALIGN_CHAR : u32 = 5 ; pub const NS_STYLE_TEXT_ALIGN_END : u32 = 6 ; pub const NS_STYLE_TEXT_ALIGN_AUTO : u32 = 7 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_CENTER : u32 = 8 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_RIGHT : u32 = 9 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_LEFT : u32 = 10 ; pub const NS_STYLE_TEXT_ALIGN_MOZ_CENTER_OR_INHERIT : u32 = 11 ; pub const NS_STYLE_TEXT_ALIGN_UNSAFE : u32 = 12 ; pub const NS_STYLE_TEXT_ALIGN_MATCH_PARENT : u32 = 13 ; pub const NS_STYLE_TEXT_DECORATION_LINE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_DECORATION_LINE_UNDERLINE : u32 = 1 ; pub const NS_STYLE_TEXT_DECORATION_LINE_OVERLINE : u32 = 2 ; pub const NS_STYLE_TEXT_DECORATION_LINE_LINE_THROUGH : u32 = 4 ; pub const NS_STYLE_TEXT_DECORATION_LINE_BLINK : u32 = 8 ; pub const NS_STYLE_TEXT_DECORATION_LINE_OVERRIDE_ALL : u32 = 16 ; pub const NS_STYLE_TEXT_DECORATION_LINE_LINES_MASK : u32 = 7 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DOTTED : u32 = 1 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DASHED : u32 = 2 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_SOLID : u32 = 3 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_DOUBLE : u32 = 4 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_WAVY : u32 = 5 ; pub const NS_STYLE_TEXT_DECORATION_STYLE_MAX : u32 = 5 ; pub const NS_STYLE_TEXT_OVERFLOW_CLIP : u32 = 0 ; pub const NS_STYLE_TEXT_OVERFLOW_ELLIPSIS : u32 = 1 ; pub const NS_STYLE_TEXT_OVERFLOW_STRING : u32 = 2 ; pub const NS_STYLE_TEXT_TRANSFORM_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_TRANSFORM_CAPITALIZE : u32 = 1 ; pub const NS_STYLE_TEXT_TRANSFORM_LOWERCASE : u32 = 2 ; pub const NS_STYLE_TEXT_TRANSFORM_UPPERCASE : u32 = 3 ; pub const NS_STYLE_TEXT_TRANSFORM_FULL_WIDTH : u32 = 4 ; pub const NS_STYLE_TOUCH_ACTION_NONE : u32 = 1 ; pub const NS_STYLE_TOUCH_ACTION_AUTO : u32 = 2 ; pub const NS_STYLE_TOUCH_ACTION_PAN_X : u32 = 4 ; pub const NS_STYLE_TOUCH_ACTION_PAN_Y : u32 = 8 ; pub const NS_STYLE_TOUCH_ACTION_MANIPULATION : u32 = 16 ; pub const NS_STYLE_TOP_LAYER_NONE : u32 = 0 ; pub const NS_STYLE_TOP_LAYER_TOP : u32 = 1 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE : u32 = 0 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_LINEAR : u32 = 1 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_IN : u32 = 2 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_OUT : u32 = 3 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_EASE_IN_OUT : u32 = 4 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_STEP_START : u32 = 5 ; pub const NS_STYLE_TRANSITION_TIMING_FUNCTION_STEP_END : u32 = 6 ; pub const NS_STYLE_VERTICAL_ALIGN_BASELINE : u32 = 14 ; pub const NS_STYLE_VERTICAL_ALIGN_SUB : u32 = 15 ; pub const NS_STYLE_VERTICAL_ALIGN_SUPER : u32 = 16 ; pub const NS_STYLE_VERTICAL_ALIGN_TOP : u32 = 17 ; pub const NS_STYLE_VERTICAL_ALIGN_TEXT_TOP : u32 = 18 ; pub const NS_STYLE_VERTICAL_ALIGN_MIDDLE : u32 = 19 ; pub const NS_STYLE_VERTICAL_ALIGN_TEXT_BOTTOM : u32 = 20 ; pub const NS_STYLE_VERTICAL_ALIGN_BOTTOM : u32 = 21 ; pub const NS_STYLE_VERTICAL_ALIGN_MIDDLE_WITH_BASELINE : u32 = 22 ; pub const NS_STYLE_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_VISIBILITY_COLLAPSE : u32 = 2 ; pub const NS_STYLE_TABSIZE_INITIAL : u32 = 8 ; pub const NS_STYLE_WORDBREAK_NORMAL : u32 = 0 ; pub const NS_STYLE_WORDBREAK_BREAK_ALL : u32 = 1 ; pub const NS_STYLE_WORDBREAK_KEEP_ALL : u32 = 2 ; pub const NS_STYLE_OVERFLOWWRAP_NORMAL : u32 = 0 ; pub const NS_STYLE_OVERFLOWWRAP_BREAK_WORD : u32 = 1 ; pub const NS_STYLE_RUBY_ALIGN_START : u32 = 0 ; pub const NS_STYLE_RUBY_ALIGN_CENTER : u32 = 1 ; pub const NS_STYLE_RUBY_ALIGN_SPACE_BETWEEN : u32 = 2 ; pub const NS_STYLE_RUBY_ALIGN_SPACE_AROUND : u32 = 3 ; pub const NS_STYLE_RUBY_POSITION_OVER : u32 = 0 ; pub const NS_STYLE_RUBY_POSITION_UNDER : u32 = 1 ; pub const NS_STYLE_RUBY_POSITION_INTER_CHARACTER : u32 = 2 ; pub const NS_STYLE_TEXT_SIZE_ADJUST_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_SIZE_ADJUST_AUTO : u32 = 1 ; pub const NS_STYLE_TEXT_ORIENTATION_MIXED : u32 = 0 ; pub const NS_STYLE_TEXT_ORIENTATION_UPRIGHT : u32 = 1 ; pub const NS_STYLE_TEXT_ORIENTATION_SIDEWAYS : u32 = 2 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_ALL : u32 = 1 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_2 : u32 = 2 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_3 : u32 = 3 ; pub const NS_STYLE_TEXT_COMBINE_UPRIGHT_DIGITS_4 : u32 = 4 ; pub const NS_STYLE_LINE_HEIGHT_BLOCK_HEIGHT : u32 = 0 ; pub const NS_STYLE_UNICODE_BIDI_NORMAL : u32 = 0 ; pub const NS_STYLE_UNICODE_BIDI_EMBED : u32 = 1 ; pub const NS_STYLE_UNICODE_BIDI_ISOLATE : u32 = 2 ; pub const NS_STYLE_UNICODE_BIDI_BIDI_OVERRIDE : u32 = 4 ; pub const NS_STYLE_UNICODE_BIDI_ISOLATE_OVERRIDE : u32 = 6 ; pub const NS_STYLE_UNICODE_BIDI_PLAINTEXT : u32 = 8 ; pub const NS_STYLE_TABLE_LAYOUT_AUTO : u32 = 0 ; pub const NS_STYLE_TABLE_LAYOUT_FIXED : u32 = 1 ; pub const NS_STYLE_TABLE_EMPTY_CELLS_HIDE : u32 = 0 ; pub const NS_STYLE_TABLE_EMPTY_CELLS_SHOW : u32 = 1 ; pub const NS_STYLE_CAPTION_SIDE_TOP : u32 = 0 ; pub const NS_STYLE_CAPTION_SIDE_RIGHT : u32 = 1 ; pub const NS_STYLE_CAPTION_SIDE_BOTTOM : u32 = 2 ; pub const NS_STYLE_CAPTION_SIDE_LEFT : u32 = 3 ; pub const NS_STYLE_CAPTION_SIDE_TOP_OUTSIDE : u32 = 4 ; pub const NS_STYLE_CAPTION_SIDE_BOTTOM_OUTSIDE : u32 = 5 ; pub const NS_STYLE_CELL_SCOPE_ROW : u32 = 0 ; pub const NS_STYLE_CELL_SCOPE_COL : u32 = 1 ; pub const NS_STYLE_CELL_SCOPE_ROWGROUP : u32 = 2 ; pub const NS_STYLE_CELL_SCOPE_COLGROUP : u32 = 3 ; pub const NS_STYLE_PAGE_MARKS_NONE : u32 = 0 ; pub const NS_STYLE_PAGE_MARKS_CROP : u32 = 1 ; pub const NS_STYLE_PAGE_MARKS_REGISTER : u32 = 2 ; pub const NS_STYLE_PAGE_SIZE_AUTO : u32 = 0 ; pub const NS_STYLE_PAGE_SIZE_PORTRAIT : u32 = 1 ; pub const NS_STYLE_PAGE_SIZE_LANDSCAPE : u32 = 2 ; pub const NS_STYLE_PAGE_BREAK_AUTO : u32 = 0 ; pub const NS_STYLE_PAGE_BREAK_ALWAYS : u32 = 1 ; pub const NS_STYLE_PAGE_BREAK_AVOID : u32 = 2 ; pub const NS_STYLE_PAGE_BREAK_LEFT : u32 = 3 ; pub const NS_STYLE_PAGE_BREAK_RIGHT : u32 = 4 ; pub const NS_STYLE_COLUMN_COUNT_AUTO : u32 = 0 ; pub const NS_STYLE_COLUMN_COUNT_UNLIMITED : i32 = -1 ; pub const NS_STYLE_COLUMN_FILL_AUTO : u32 = 0 ; pub const NS_STYLE_COLUMN_FILL_BALANCE : u32 = 1 ; pub const NS_STYLE_COLUMN_SPAN_NONE : u32 = 0 ; pub const NS_STYLE_COLUMN_SPAN_ALL : u32 = 1 ; pub const NS_STYLE_IME_MODE_AUTO : u32 = 0 ; pub const NS_STYLE_IME_MODE_NORMAL : u32 = 1 ; pub const NS_STYLE_IME_MODE_ACTIVE : u32 = 2 ; pub const NS_STYLE_IME_MODE_DISABLED : u32 = 3 ; pub const NS_STYLE_IME_MODE_INACTIVE : u32 = 4 ; pub const NS_STYLE_GRADIENT_SHAPE_LINEAR : u32 = 0 ; pub const NS_STYLE_GRADIENT_SHAPE_ELLIPTICAL : u32 = 1 ; pub const NS_STYLE_GRADIENT_SHAPE_CIRCULAR : u32 = 2 ; pub const NS_STYLE_GRADIENT_SIZE_CLOSEST_SIDE : u32 = 0 ; pub const NS_STYLE_GRADIENT_SIZE_CLOSEST_CORNER : u32 = 1 ; pub const NS_STYLE_GRADIENT_SIZE_FARTHEST_SIDE : u32 = 2 ; pub const NS_STYLE_GRADIENT_SIZE_FARTHEST_CORNER : u32 = 3 ; pub const NS_STYLE_GRADIENT_SIZE_EXPLICIT_SIZE : u32 = 4 ; pub const NS_STYLE_CONTEXT_PROPERTY_FILL : u32 = 1 ; pub const NS_STYLE_CONTEXT_PROPERTY_STROKE : u32 = 2 ; pub const NS_STYLE_CONTEXT_PROPERTY_FILL_OPACITY : u32 = 4 ; pub const NS_STYLE_CONTEXT_PROPERTY_STROKE_OPACITY : u32 = 8 ; pub const NS_STYLE_WINDOW_SHADOW_NONE : u32 = 0 ; pub const NS_STYLE_WINDOW_SHADOW_DEFAULT : u32 = 1 ; pub const NS_STYLE_WINDOW_SHADOW_MENU : u32 = 2 ; pub const NS_STYLE_WINDOW_SHADOW_TOOLTIP : u32 = 3 ; pub const NS_STYLE_WINDOW_SHADOW_SHEET : u32 = 4 ; pub const NS_STYLE_DOMINANT_BASELINE_AUTO : u32 = 0 ; pub const NS_STYLE_DOMINANT_BASELINE_USE_SCRIPT : u32 = 1 ; pub const NS_STYLE_DOMINANT_BASELINE_NO_CHANGE : u32 = 2 ; pub const NS_STYLE_DOMINANT_BASELINE_RESET_SIZE : u32 = 3 ; pub const NS_STYLE_DOMINANT_BASELINE_IDEOGRAPHIC : u32 = 4 ; pub const NS_STYLE_DOMINANT_BASELINE_ALPHABETIC : u32 = 5 ; pub const NS_STYLE_DOMINANT_BASELINE_HANGING : u32 = 6 ; pub const NS_STYLE_DOMINANT_BASELINE_MATHEMATICAL : u32 = 7 ; pub const NS_STYLE_DOMINANT_BASELINE_CENTRAL : u32 = 8 ; pub const NS_STYLE_DOMINANT_BASELINE_MIDDLE : u32 = 9 ; pub const NS_STYLE_DOMINANT_BASELINE_TEXT_AFTER_EDGE : u32 = 10 ; pub const NS_STYLE_DOMINANT_BASELINE_TEXT_BEFORE_EDGE : u32 = 11 ; pub const NS_STYLE_IMAGE_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_IMAGE_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_IMAGE_RENDERING_OPTIMIZEQUALITY : u32 = 2 ; pub const NS_STYLE_IMAGE_RENDERING_CRISPEDGES : u32 = 3 ; pub const NS_STYLE_MASK_TYPE_LUMINANCE : u32 = 0 ; pub const NS_STYLE_MASK_TYPE_ALPHA : u32 = 1 ; pub const NS_STYLE_PAINT_ORDER_NORMAL : u32 = 0 ; pub const NS_STYLE_PAINT_ORDER_FILL : u32 = 1 ; pub const NS_STYLE_PAINT_ORDER_STROKE : u32 = 2 ; pub const NS_STYLE_PAINT_ORDER_MARKERS : u32 = 3 ; pub const NS_STYLE_PAINT_ORDER_LAST_VALUE : u32 = 3 ; pub const NS_STYLE_PAINT_ORDER_BITWIDTH : u32 = 2 ; pub const NS_STYLE_SHAPE_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_SHAPE_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_SHAPE_RENDERING_CRISPEDGES : u32 = 2 ; pub const NS_STYLE_SHAPE_RENDERING_GEOMETRICPRECISION : u32 = 3 ; pub const NS_STYLE_STROKE_LINECAP_BUTT : u32 = 0 ; pub const NS_STYLE_STROKE_LINECAP_ROUND : u32 = 1 ; pub const NS_STYLE_STROKE_LINECAP_SQUARE : u32 = 2 ; pub const NS_STYLE_STROKE_LINEJOIN_MITER : u32 = 0 ; pub const NS_STYLE_STROKE_LINEJOIN_ROUND : u32 = 1 ; pub const NS_STYLE_STROKE_LINEJOIN_BEVEL : u32 = 2 ; pub const NS_STYLE_STROKE_PROP_CONTEXT_VALUE : u32 = 0 ; pub const NS_STYLE_TEXT_ANCHOR_START : u32 = 0 ; pub const NS_STYLE_TEXT_ANCHOR_MIDDLE : u32 = 1 ; pub const NS_STYLE_TEXT_ANCHOR_END : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_OVER : u32 = 1 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_UNDER : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_LEFT : u32 = 4 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_RIGHT : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_DEFAULT : u32 = 9 ; pub const NS_STYLE_TEXT_EMPHASIS_POSITION_DEFAULT_ZH : u32 = 10 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_NONE : u32 = 0 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_FILL_MASK : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_FILLED : u32 = 0 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_OPEN : u32 = 8 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_SHAPE_MASK : u32 = 7 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_DOT : u32 = 1 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_CIRCLE : u32 = 2 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_DOUBLE_CIRCLE : u32 = 3 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_TRIANGLE : u32 = 4 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_SESAME : u32 = 5 ; pub const NS_STYLE_TEXT_EMPHASIS_STYLE_STRING : u32 = 255 ; pub const NS_STYLE_TEXT_RENDERING_AUTO : u32 = 0 ; pub const NS_STYLE_TEXT_RENDERING_OPTIMIZESPEED : u32 = 1 ; pub const NS_STYLE_TEXT_RENDERING_OPTIMIZELEGIBILITY : u32 = 2 ; pub const NS_STYLE_TEXT_RENDERING_GEOMETRICPRECISION : u32 = 3 ; pub const NS_STYLE_COLOR_ADJUST_ECONOMY : u32 = 0 ; pub const NS_STYLE_COLOR_ADJUST_EXACT : u32 = 1 ; pub const NS_STYLE_COLOR_INTERPOLATION_AUTO : u32 = 0 ; pub const NS_STYLE_COLOR_INTERPOLATION_SRGB : u32 = 1 ; pub const NS_STYLE_COLOR_INTERPOLATION_LINEARRGB : u32 = 2 ; pub const NS_STYLE_VECTOR_EFFECT_NONE : u32 = 0 ; pub const NS_STYLE_VECTOR_EFFECT_NON_SCALING_STROKE : u32 = 1 ; pub const NS_STYLE_BACKFACE_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_BACKFACE_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_TRANSFORM_STYLE_FLAT : u32 = 0 ; pub const NS_STYLE_TRANSFORM_STYLE_PRESERVE_3D : u32 = 1 ; pub const NS_STYLE_CONTEXT_FILL_OPACITY : u32 = 0 ; pub const NS_STYLE_CONTEXT_STROKE_OPACITY : u32 = 1 ; pub const NS_STYLE_BLEND_NORMAL : u32 = 0 ; pub const NS_STYLE_BLEND_MULTIPLY : u32 = 1 ; pub const NS_STYLE_BLEND_SCREEN : u32 = 2 ; pub const NS_STYLE_BLEND_OVERLAY : u32 = 3 ; pub const NS_STYLE_BLEND_DARKEN : u32 = 4 ; pub const NS_STYLE_BLEND_LIGHTEN : u32 = 5 ; pub const NS_STYLE_BLEND_COLOR_DODGE : u32 = 6 ; pub const NS_STYLE_BLEND_COLOR_BURN : u32 = 7 ; pub const NS_STYLE_BLEND_HARD_LIGHT : u32 = 8 ; pub const NS_STYLE_BLEND_SOFT_LIGHT : u32 = 9 ; pub const NS_STYLE_BLEND_DIFFERENCE : u32 = 10 ; pub const NS_STYLE_BLEND_EXCLUSION : u32 = 11 ; pub const NS_STYLE_BLEND_HUE : u32 = 12 ; pub const NS_STYLE_BLEND_SATURATION : u32 = 13 ; pub const NS_STYLE_BLEND_COLOR : u32 = 14 ; pub const NS_STYLE_BLEND_LUMINOSITY : u32 = 15 ; pub const NS_STYLE_MASK_COMPOSITE_ADD : u32 = 0 ; pub const NS_STYLE_MASK_COMPOSITE_SUBTRACT : u32 = 1 ; pub const NS_STYLE_MASK_COMPOSITE_INTERSECT : u32 = 2 ; pub const NS_STYLE_MASK_COMPOSITE_EXCLUDE : u32 = 3 ; pub const NS_STYLE_CONTROL_CHARACTER_VISIBILITY_HIDDEN : u32 = 0 ; pub const NS_STYLE_CONTROL_CHARACTER_VISIBILITY_VISIBLE : u32 = 1 ; pub const NS_STYLE_COUNTER_SYSTEM_CYCLIC : u32 = 0 ; pub const NS_STYLE_COUNTER_SYSTEM_NUMERIC : u32 = 1 ; pub const NS_STYLE_COUNTER_SYSTEM_ALPHABETIC : u32 = 2 ; pub const NS_STYLE_COUNTER_SYSTEM_SYMBOLIC : u32 = 3 ; pub const NS_STYLE_COUNTER_SYSTEM_ADDITIVE : u32 = 4 ; pub const NS_STYLE_COUNTER_SYSTEM_FIXED : u32 = 5 ; pub const NS_STYLE_COUNTER_SYSTEM_EXTENDS : u32 = 6 ; pub const NS_STYLE_COUNTER_RANGE_INFINITE : u32 = 0 ; pub const NS_STYLE_COUNTER_SPEAKAS_BULLETS : u32 = 0 ; pub const NS_STYLE_COUNTER_SPEAKAS_NUMBERS : u32 = 1 ; pub const NS_STYLE_COUNTER_SPEAKAS_WORDS : u32 = 2 ; pub const NS_STYLE_COUNTER_SPEAKAS_SPELL_OUT : u32 = 3 ; pub const NS_STYLE_COUNTER_SPEAKAS_OTHER : u32 = 255 ; pub const NS_STYLE_SCROLL_BEHAVIOR_AUTO : u32 = 0 ; pub const NS_STYLE_SCROLL_BEHAVIOR_SMOOTH : u32 = 1 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_NONE : u32 = 0 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_MANDATORY : u32 = 1 ; pub const NS_STYLE_SCROLL_SNAP_TYPE_PROXIMITY : u32 = 2 ; pub const CSS_PSEUDO_ELEMENT_IS_CSS2 : u32 = 1 ; pub const CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS : u32 = 2 ; pub const CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE : u32 = 4 ; pub const CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE : u32 = 8 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS : u32 = 16 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME : u32 = 32 ; pub const CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME : u32 = 48 ; pub const CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC : u32 = 64 ; pub const CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM : u32 = 128 ; pub const kNameSpaceID_Unknown : i32 = -1 ; pub const kNameSpaceID_XMLNS : u32 = 1 ; pub const kNameSpaceID_XML : u32 = 2 ; pub const kNameSpaceID_XHTML : u32 = 3 ; pub const kNameSpaceID_XLink : u32 = 4 ; pub const kNameSpaceID_XSLT : u32 = 5 ; pub const kNameSpaceID_XBL : u32 = 6 ; pub const kNameSpaceID_MathML : u32 = 7 ; pub const kNameSpaceID_RDF : u32 = 8 ; pub const kNameSpaceID_XUL : u32 = 9 ; pub const kNameSpaceID_SVG : u32 = 10 ; pub const kNameSpaceID_disabled_MathML : u32 = 11 ; pub const kNameSpaceID_disabled_SVG : u32 = 12 ; pub const kNameSpaceID_LastBuiltin : u32 = 12 ; pub const kNameSpaceID_Wildcard : i32 = -2147483648 ; pub const NS_AUTHOR_SPECIFIED_BACKGROUND : u32 = 1 ; pub const NS_AUTHOR_SPECIFIED_BORDER : u32 = 2 ; pub const NS_AUTHOR_SPECIFIED_PADDING : u32 = 4 ; pub const NS_STYLE_INHERIT_MASK : u32 = 16777215 ; pub const NS_STYLE_HAS_TEXT_DECORATION_LINES : u32 = 16777216 ; pub const NS_STYLE_HAS_PSEUDO_ELEMENT_DATA : u32 = 33554432 ; pub const NS_STYLE_RELEVANT_LINK_VISITED : u32 = 67108864 ; pub const NS_STYLE_IS_STYLE_IF_VISITED : u32 = 134217728 ; pub const NS_STYLE_CHILD_USES_GRANDANCESTOR_STYLE : u32 = 268435456 ; pub const NS_STYLE_IS_SHARED : u32 = 536870912 ; pub const NS_STYLE_IS_GOING_AWAY : u32 = 1073741824 ; pub const NS_STYLE_SUPPRESS_LINEBREAK : u32 = 2147483648 ; pub const NS_STYLE_IN_DISPLAY_NONE_SUBTREE : u64 = 4294967296 ; pub const NS_STYLE_INELIGIBLE_FOR_SHARING : u64 = 8589934592 ; pub const NS_STYLE_HAS_CHILD_THAT_USES_RESET_STYLE : u64 = 17179869184 ; pub const NS_STYLE_IS_TEXT_COMBINED : u64 = 34359738368 ; pub const NS_STYLE_CONTEXT_IS_GECKO : u64 = 68719476736 ; pub const NS_STYLE_CONTEXT_TYPE_SHIFT : u32 = 37 ; pub mod std { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nothrow_t { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nothrow_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nothrow_t > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( nothrow_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nothrow_t > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( nothrow_t ) ) ) ; } impl Clone for nothrow_t { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct __pair_base { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct pair < _T1 , _T2 > { pub first : _T1 , pub second : _T2 , pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < _T1 > > , pub _phantom_1 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < _T2 > > , } pub type pair_first_type < _T1 > = _T1 ; pub type pair_second_type < _T2 > = _T2 ; pub type pair__PCCP = u8 ; pub type pair__PCCFP = u8 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pair___zero_as_null_pointer_constant { pub _address : u8 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct input_iterator_tag { pub _address : u8 , } # [ test ] fn bindgen_test_layout_input_iterator_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < input_iterator_tag > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( input_iterator_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < input_iterator_tag > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( input_iterator_tag ) ) ) ; } impl Clone for input_iterator_tag { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct iterator { pub _address : u8 , } pub type iterator_iterator_category < _Category > = _Category ; pub type iterator_value_type < _Tp > = _Tp ; pub type iterator_difference_type < _Distance > = _Distance ; pub type iterator_pointer < _Pointer > = _Pointer ; pub type iterator_reference < _Reference > = _Reference ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct atomic { pub _address : u8 , } pub type atomic_value_type < _Tp > = _Tp ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct function { pub _address : u8 , } pub type _Base_bitset__WordT = :: std :: os :: raw :: c_ulong ; pub type bitset__Base = u8 ; pub type bitset__WordT = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct bitset_reference { pub _M_wp : * mut root::std::bitset__WordT , pub _M_bpos : usize , } } pub mod __gnu_cxx { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; } pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_long ; pub type __uint64_t = :: std :: os :: raw :: c_ulong ; pub mod mozilla { # [ allow ( unused_imports ) ] use self :: super :: super :: root ; pub type fallible_t = root::std::nothrow_t ; pub type IntegralConstant_ValueType < T > = T ; pub type IntegralConstant_Type = u8 ; 
  /// Convenient aliases. 
  pub type TrueType = u8 ; pub type FalseType = u8 ; pub mod detail { # [ allow ( unused_imports ) ] use self :: super :: super :: super :: root ; pub const StringDataFlags_TERMINATED : root::mozilla::detail::StringDataFlags = 1 ; pub const StringDataFlags_VOIDED : root::mozilla::detail::StringDataFlags = 2 ; pub const StringDataFlags_SHARED : root::mozilla::detail::StringDataFlags = 4 ; pub const StringDataFlags_OWNED : root::mozilla::detail::StringDataFlags = 8 ; pub const StringDataFlags_INLINE : root::mozilla::detail::StringDataFlags = 16 ; pub const StringDataFlags_LITERAL : root::mozilla::detail::StringDataFlags = 32 ; pub type StringDataFlags = u16 ; pub const StringClassFlags_INLINE : root::mozilla::detail::StringClassFlags = 1 ; pub const StringClassFlags_NULL_TERMINATED : root::mozilla::detail::StringClassFlags = 2 ; pub type StringClassFlags = u16 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsTStringRepr < T > { pub mData : * mut root::mozilla::detail::nsTStringRepr_char_type < T > , pub mLength : root::mozilla::detail::nsTStringRepr_size_type , pub mDataFlags : root::mozilla::detail::nsTStringRepr_DataFlags , pub mClassFlags : root::mozilla::detail::nsTStringRepr_ClassFlags , pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , } pub type nsTStringRepr_fallible_t = root::mozilla::fallible_t ; pub type nsTStringRepr_char_type < T > = T ; pub type nsTStringRepr_self_type < T > = root :: mozilla :: detail :: nsTStringRepr < T > ; pub type nsTStringRepr_base_string_type < T > = root::mozilla::detail::nsTStringRepr_self_type < T > ; pub type nsTStringRepr_substring_type < T > = root :: nsTSubstring < T > ; pub type nsTStringRepr_substring_tuple_type < T > = root :: nsTSubstringTuple < T > ; pub type nsTStringRepr_literalstring_type < T > = root :: nsTLiteralString < T > ; pub type nsTStringRepr_const_iterator < T > = root :: nsReadingIterator < root::mozilla::detail::nsTStringRepr_char_type < T > > ; pub type nsTStringRepr_iterator < T > = root :: nsWritingIterator < root::mozilla::detail::nsTStringRepr_char_type < T > > ; pub type nsTStringRepr_comparator_type = root :: nsTStringComparator ; pub type nsTStringRepr_char_iterator < T > = * mut root::mozilla::detail::nsTStringRepr_char_type < T > ; pub type nsTStringRepr_const_char_iterator < T > = * const root::mozilla::detail::nsTStringRepr_char_type < T > ; pub type nsTStringRepr_index_type = u32 ; pub type nsTStringRepr_size_type = u32 ; pub use self :: super :: super :: super :: root::mozilla::detail::StringDataFlags as nsTStringRepr_DataFlags ; pub use self :: super :: super :: super :: root::mozilla::detail::StringClassFlags as nsTStringRepr_ClassFlags ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsTStringRepr_raw_type { pub _address : u8 , } pub type nsTStringRepr_raw_type_type < U > = * const U ; 
  /// LinkedList supports refcounted elements using this adapter class. Clients
@@ -1511,7 +1511,7 @@ where
  pub type nsWrapperCache__bindgen_ty_1 = u32 ; pub const nsWrapperCache_WRAPPER_IS_NOT_DOM_BINDING : root::nsWrapperCache__bindgen_ty_2 = 2 ; 
  /// If this bit is set then the wrapper for the native object is not a DOM
     /// binding. 
- pub type nsWrapperCache__bindgen_ty_2 = u32 ; pub const nsWrapperCache_kWrapperFlagsMask : root::nsWrapperCache__bindgen_ty_3 = 3 ; pub type nsWrapperCache__bindgen_ty_3 = u32 ; # [ test ] fn bindgen_test_layout_nsWrapperCache ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsWrapperCache > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( nsWrapperCache ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsWrapperCache > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsWrapperCache ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mWrapper as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mWrapper ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mFlags as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mFlags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mBoolFlags as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mBoolFlags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerBacktrace { _unused : [ u8 ; 0 ] , } impl Clone for ProfilerBacktrace { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerMarkerPayload { _unused : [ u8 ; 0 ] , } impl Clone for ProfilerMarkerPayload { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerBacktraceDestructor { pub _address : u8 , } # [ test ] fn bindgen_test_layout_ProfilerBacktraceDestructor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ProfilerBacktraceDestructor > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( ProfilerBacktraceDestructor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ProfilerBacktraceDestructor > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( ProfilerBacktraceDestructor ) ) ) ; } impl Clone for ProfilerBacktraceDestructor { fn clone ( & self ) -> Self { * self } } pub type UniqueProfilerBacktrace = root :: mozilla :: UniquePtr < root::ProfilerBacktrace > ; pub type gfxSize = [ u64 ; 2usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIDOMNode { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIDOMNode_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIDOMNode ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIDOMNode > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIDOMNode ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIDOMNode > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIDOMNode ) ) ) ; } impl Clone for nsIDOMNode { fn clone ( & self ) -> Self { * self } } pub const kNameSpaceID_None : i32 = 0 ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIVariant { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIVariant_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIVariant ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIVariant > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIVariant ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIVariant > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIVariant ) ) ) ; } impl Clone for nsIVariant { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] pub struct nsNodeInfoManager { pub mRefCnt : root::nsCycleCollectingAutoRefCnt , pub mNodeInfoHash : [ u64 ; 4usize ] , pub mDocument : * mut root::nsIDocument , pub mNonDocumentNodeInfos : u32 , pub mPrincipal : root :: nsCOMPtr , pub mDefaultPrincipal : root :: nsCOMPtr , pub mTextNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mCommentNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mDocumentNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mBindingManager : root :: RefPtr < root::nsBindingManager > , pub mRecentlyUsedNodeInfos : [ * mut root::mozilla::dom::NodeInfo ; 31usize ] , pub mSVGEnabled : root::nsNodeInfoManager_Tri , pub mMathMLEnabled : root::nsNodeInfoManager_Tri , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsNodeInfoManager_cycleCollection { pub _base : root::nsCycleCollectionParticipant , } # [ test ] fn bindgen_test_layout_nsNodeInfoManager_cycleCollection ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager_cycleCollection > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager_cycleCollection ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager_cycleCollection > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager_cycleCollection ) ) ) ; } impl Clone for nsNodeInfoManager_cycleCollection { fn clone ( & self ) -> Self { * self } } pub type nsNodeInfoManager_HasThreadSafeRefCnt = root::mozilla::FalseType ; pub const nsNodeInfoManager_Tri_eTriUnset : root::nsNodeInfoManager_Tri = 0 ; pub const nsNodeInfoManager_Tri_eTriFalse : root::nsNodeInfoManager_Tri = 1 ; pub const nsNodeInfoManager_Tri_eTriTrue : root::nsNodeInfoManager_Tri = 2 ; pub type nsNodeInfoManager_Tri = u32 ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsNodeInfoManager_NodeInfoInnerKey { pub _base : root :: nsPtrHashKey < root::mozilla::dom::NodeInfo_NodeInfoInner > , } # [ test ] fn bindgen_test_layout_nsNodeInfoManager_NodeInfoInnerKey ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager_NodeInfoInnerKey > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager_NodeInfoInnerKey ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager_NodeInfoInnerKey > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager_NodeInfoInnerKey ) ) ) ; } extern "C" { # [ link_name = "\u{1}_ZN17nsNodeInfoManager21_cycleCollectorGlobalE" ] pub static mut nsNodeInfoManager__cycleCollectorGlobal : root::nsNodeInfoManager_cycleCollection ; } # [ test ] fn bindgen_test_layout_nsNodeInfoManager ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager > ( ) , 360usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mRefCnt as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mRefCnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mNodeInfoHash as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mNodeInfoHash ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDocument as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDocument ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mNonDocumentNodeInfos as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mNonDocumentNodeInfos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mPrincipal as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mPrincipal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDefaultPrincipal as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDefaultPrincipal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mTextNodeInfo as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mTextNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mCommentNodeInfo as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mCommentNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDocumentNodeInfo as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDocumentNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mBindingManager as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mBindingManager ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mRecentlyUsedNodeInfos as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mRecentlyUsedNodeInfos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mSVGEnabled as * const _ as usize } , 352usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mSVGEnabled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mMathMLEnabled as * const _ as usize } , 356usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mMathMLEnabled ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsPropertyTable { pub mPropertyList : * mut root::nsPropertyTable_PropertyList , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsPropertyTable_PropertyList { _unused : [ u8 ; 0 ] , } impl Clone for nsPropertyTable_PropertyList { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout_nsPropertyTable ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsPropertyTable > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsPropertyTable ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsPropertyTable > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsPropertyTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsPropertyTable > ( ) ) ) . mPropertyList as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsPropertyTable ) , "::" , stringify ! ( mPropertyList ) ) ) ; } pub type nsTObserverArray_base_index_type = usize ; pub type nsTObserverArray_base_size_type = usize ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsTObserverArray_base_Iterator_base { pub mPosition : root::nsTObserverArray_base_index_type , pub mNext : * mut root::nsTObserverArray_base_Iterator_base , } # [ test ] fn bindgen_test_layout_nsTObserverArray_base_Iterator_base ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsTObserverArray_base_Iterator_base > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsTObserverArray_base_Iterator_base ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsTObserverArray_base_Iterator_base > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsTObserverArray_base_Iterator_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsTObserverArray_base_Iterator_base > ( ) ) ) . mPosition as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsTObserverArray_base_Iterator_base ) , "::" , stringify ! ( mPosition ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsTObserverArray_base_Iterator_base > ( ) ) ) . mNext as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsTObserverArray_base_Iterator_base ) , "::" , stringify ! ( mNext ) ) ) ; } impl Clone for nsTObserverArray_base_Iterator_base { fn clone ( & self ) -> Self { * self } } pub type nsAutoTObserverArray_elem_type < T > = T ; pub type nsAutoTObserverArray_array_type < T > = root :: nsTArray < T > ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_Iterator { pub _base : root::nsTObserverArray_base_Iterator_base , pub mArray : * mut root::nsAutoTObserverArray_Iterator_array_type , } pub type nsAutoTObserverArray_Iterator_array_type = u8 ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_ForwardIterator { pub _base : root::nsAutoTObserverArray_Iterator , } pub type nsAutoTObserverArray_ForwardIterator_array_type = u8 ; pub type nsAutoTObserverArray_ForwardIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_EndLimitedIterator { pub _base : root::nsAutoTObserverArray_ForwardIterator , pub mEnd : root::nsAutoTObserverArray_ForwardIterator , } pub type nsAutoTObserverArray_EndLimitedIterator_array_type = u8 ; pub type nsAutoTObserverArray_EndLimitedIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_BackwardIterator { pub _base : root::nsAutoTObserverArray_Iterator , } pub type nsAutoTObserverArray_BackwardIterator_array_type = u8 ; pub type nsAutoTObserverArray_BackwardIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsTObserverArray { pub _address : u8 , } pub type nsTObserverArray_base_type = u8 ; pub type nsTObserverArray_size_type = root::nsTObserverArray_base_size_type ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIDOMEventTarget { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIDOMEventTarget_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIDOMEventTarget ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIDOMEventTarget > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIDOMEventTarget ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIDOMEventTarget > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIDOMEventTarget ) ) ) ; } impl Clone for nsIDOMEventTarget { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsAttrChildContentList { _unused : [ u8 ; 0 ] , } impl Clone for nsAttrChildContentList { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsCSSSelectorList { _unused : [ u8 ; 0 ] , } impl Clone for nsCSSSelectorList { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsRange { _unused : [ u8 ; 0 ] , } impl Clone for nsRange { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct RawServoSelectorList { _unused : [ u8 ; 0 ] , } impl Clone for RawServoSelectorList { fn clone ( & self ) -> Self { * self } } pub const NODE_HAS_LISTENERMANAGER : root::_bindgen_ty_30 = 4 ; pub const NODE_HAS_PROPERTIES : root::_bindgen_ty_30 = 8 ; pub const NODE_IS_ANONYMOUS_ROOT : root::_bindgen_ty_30 = 16 ; pub const NODE_IS_IN_NATIVE_ANONYMOUS_SUBTREE : root::_bindgen_ty_30 = 32 ; pub const NODE_IS_NATIVE_ANONYMOUS_ROOT : root::_bindgen_ty_30 = 64 ; pub const NODE_FORCE_XBL_BINDINGS : root::_bindgen_ty_30 = 128 ; pub const NODE_MAY_BE_IN_BINDING_MNGR : root::_bindgen_ty_30 = 256 ; pub const NODE_IS_EDITABLE : root::_bindgen_ty_30 = 512 ; pub const NODE_IS_NATIVE_ANONYMOUS : root::_bindgen_ty_30 = 1024 ; pub const NODE_IS_IN_SHADOW_TREE : root::_bindgen_ty_30 = 2048 ; pub const NODE_HAS_EMPTY_SELECTOR : root::_bindgen_ty_30 = 4096 ; pub const NODE_HAS_SLOW_SELECTOR : root::_bindgen_ty_30 = 8192 ; pub const NODE_HAS_EDGE_CHILD_SELECTOR : root::_bindgen_ty_30 = 16384 ; pub const NODE_HAS_SLOW_SELECTOR_LATER_SIBLINGS : root::_bindgen_ty_30 = 32768 ; pub const NODE_ALL_SELECTOR_FLAGS : root::_bindgen_ty_30 = 61440 ; pub const NODE_NEEDS_FRAME : root::_bindgen_ty_30 = 65536 ; pub const NODE_DESCENDANTS_NEED_FRAMES : root::_bindgen_ty_30 = 131072 ; pub const NODE_HAS_ACCESSKEY : root::_bindgen_ty_30 = 262144 ; pub const NODE_HAS_DIRECTION_RTL : root::_bindgen_ty_30 = 524288 ; pub const NODE_HAS_DIRECTION_LTR : root::_bindgen_ty_30 = 1048576 ; pub const NODE_ALL_DIRECTION_FLAGS : root::_bindgen_ty_30 = 1572864 ; pub const NODE_CHROME_ONLY_ACCESS : root::_bindgen_ty_30 = 2097152 ; pub const NODE_IS_ROOT_OF_CHROME_ONLY_ACCESS : root::_bindgen_ty_30 = 4194304 ; pub const NODE_TYPE_SPECIFIC_BITS_OFFSET : root::_bindgen_ty_30 = 21 ; pub type _bindgen_ty_30 = u32 ; 
+ pub type nsWrapperCache__bindgen_ty_2 = u32 ; pub const nsWrapperCache_kWrapperFlagsMask : root::nsWrapperCache__bindgen_ty_3 = 3 ; pub type nsWrapperCache__bindgen_ty_3 = u32 ; # [ test ] fn bindgen_test_layout_nsWrapperCache ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsWrapperCache > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( nsWrapperCache ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsWrapperCache > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsWrapperCache ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mWrapper as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mWrapper ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mFlags as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mFlags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsWrapperCache > ( ) ) ) . mBoolFlags as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( nsWrapperCache ) , "::" , stringify ! ( mBoolFlags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerBacktrace { _unused : [ u8 ; 0 ] , } impl Clone for ProfilerBacktrace { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerMarkerPayload { _unused : [ u8 ; 0 ] , } impl Clone for ProfilerMarkerPayload { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct ProfilerBacktraceDestructor { pub _address : u8 , } # [ test ] fn bindgen_test_layout_ProfilerBacktraceDestructor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ProfilerBacktraceDestructor > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( ProfilerBacktraceDestructor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ProfilerBacktraceDestructor > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( ProfilerBacktraceDestructor ) ) ) ; } impl Clone for ProfilerBacktraceDestructor { fn clone ( & self ) -> Self { * self } } pub type UniqueProfilerBacktrace = root :: mozilla :: UniquePtr < root::ProfilerBacktrace > ; pub type gfxSize = [ u64 ; 2usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIDOMNode { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIDOMNode_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIDOMNode ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIDOMNode > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIDOMNode ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIDOMNode > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIDOMNode ) ) ) ; } impl Clone for nsIDOMNode { fn clone ( & self ) -> Self { * self } } pub const kNameSpaceID_None : i32 = 0 ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIVariant { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIVariant_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIVariant ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIVariant > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIVariant ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIVariant > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIVariant ) ) ) ; } impl Clone for nsIVariant { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] pub struct nsNodeInfoManager { pub mRefCnt : root::nsCycleCollectingAutoRefCnt , pub mNodeInfoHash : [ u64 ; 4usize ] , pub mDocument : * mut root::nsIDocument , pub mNonDocumentNodeInfos : u32 , pub mPrincipal : root :: nsCOMPtr , pub mDefaultPrincipal : root :: nsCOMPtr , pub mTextNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mCommentNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mDocumentNodeInfo : * mut root::mozilla::dom::NodeInfo , pub mBindingManager : root :: RefPtr < root::nsBindingManager > , pub mRecentlyUsedNodeInfos : [ * mut root::mozilla::dom::NodeInfo ; 31usize ] , pub mSVGEnabled : root::nsNodeInfoManager_Tri , pub mMathMLEnabled : root::nsNodeInfoManager_Tri , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsNodeInfoManager_cycleCollection { pub _base : root::nsCycleCollectionParticipant , } # [ test ] fn bindgen_test_layout_nsNodeInfoManager_cycleCollection ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager_cycleCollection > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager_cycleCollection ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager_cycleCollection > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager_cycleCollection ) ) ) ; } impl Clone for nsNodeInfoManager_cycleCollection { fn clone ( & self ) -> Self { * self } } pub type nsNodeInfoManager_HasThreadSafeRefCnt = root::mozilla::FalseType ; pub const nsNodeInfoManager_Tri_eTriUnset : root::nsNodeInfoManager_Tri = 0 ; pub const nsNodeInfoManager_Tri_eTriFalse : root::nsNodeInfoManager_Tri = 1 ; pub const nsNodeInfoManager_Tri_eTriTrue : root::nsNodeInfoManager_Tri = 2 ; pub type nsNodeInfoManager_Tri = u32 ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsNodeInfoManager_NodeInfoInnerKey { pub _base : root :: nsPtrHashKey < root::mozilla::dom::NodeInfo_NodeInfoInner > , } # [ test ] fn bindgen_test_layout_nsNodeInfoManager_NodeInfoInnerKey ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager_NodeInfoInnerKey > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager_NodeInfoInnerKey ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager_NodeInfoInnerKey > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager_NodeInfoInnerKey ) ) ) ; } extern "C" { # [ link_name = "\u{1}_ZN17nsNodeInfoManager21_cycleCollectorGlobalE" ] pub static mut nsNodeInfoManager__cycleCollectorGlobal : root::nsNodeInfoManager_cycleCollection ; } # [ test ] fn bindgen_test_layout_nsNodeInfoManager ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsNodeInfoManager > ( ) , 360usize , concat ! ( "Size of: " , stringify ! ( nsNodeInfoManager ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsNodeInfoManager > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsNodeInfoManager ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mRefCnt as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mRefCnt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mNodeInfoHash as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mNodeInfoHash ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDocument as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDocument ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mNonDocumentNodeInfos as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mNonDocumentNodeInfos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mPrincipal as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mPrincipal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDefaultPrincipal as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDefaultPrincipal ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mTextNodeInfo as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mTextNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mCommentNodeInfo as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mCommentNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mDocumentNodeInfo as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mDocumentNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mBindingManager as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mBindingManager ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mRecentlyUsedNodeInfos as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mRecentlyUsedNodeInfos ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mSVGEnabled as * const _ as usize } , 352usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mSVGEnabled ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsNodeInfoManager > ( ) ) ) . mMathMLEnabled as * const _ as usize } , 356usize , concat ! ( "Offset of field: " , stringify ! ( nsNodeInfoManager ) , "::" , stringify ! ( mMathMLEnabled ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsPropertyTable { pub mPropertyList : * mut root::nsPropertyTable_PropertyList , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsPropertyTable_PropertyList { _unused : [ u8 ; 0 ] , } impl Clone for nsPropertyTable_PropertyList { fn clone ( & self ) -> Self { * self } } # [ test ] fn bindgen_test_layout_nsPropertyTable ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsPropertyTable > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsPropertyTable ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsPropertyTable > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsPropertyTable ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsPropertyTable > ( ) ) ) . mPropertyList as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsPropertyTable ) , "::" , stringify ! ( mPropertyList ) ) ) ; } pub type nsTObserverArray_base_index_type = usize ; pub type nsTObserverArray_base_size_type = usize ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsTObserverArray_base_Iterator_base { pub mPosition : root::nsTObserverArray_base_index_type , pub mNext : * mut root::nsTObserverArray_base_Iterator_base , } # [ test ] fn bindgen_test_layout_nsTObserverArray_base_Iterator_base ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsTObserverArray_base_Iterator_base > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( nsTObserverArray_base_Iterator_base ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsTObserverArray_base_Iterator_base > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsTObserverArray_base_Iterator_base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsTObserverArray_base_Iterator_base > ( ) ) ) . mPosition as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsTObserverArray_base_Iterator_base ) , "::" , stringify ! ( mPosition ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsTObserverArray_base_Iterator_base > ( ) ) ) . mNext as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsTObserverArray_base_Iterator_base ) , "::" , stringify ! ( mNext ) ) ) ; } impl Clone for nsTObserverArray_base_Iterator_base { fn clone ( & self ) -> Self { * self } } pub type nsAutoTObserverArray_elem_type < T > = T ; pub type nsAutoTObserverArray_array_type < T > = root :: nsTArray < T > ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_Iterator { pub _base : root::nsTObserverArray_base_Iterator_base , pub mArray : * mut root::nsAutoTObserverArray_Iterator_array_type , } pub type nsAutoTObserverArray_Iterator_array_type = u8 ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_ForwardIterator { pub _base : root::nsAutoTObserverArray_Iterator , } pub type nsAutoTObserverArray_ForwardIterator_array_type = u8 ; pub type nsAutoTObserverArray_ForwardIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_EndLimitedIterator { pub _base : root::nsAutoTObserverArray_ForwardIterator , pub mEnd : root::nsAutoTObserverArray_ForwardIterator , } pub type nsAutoTObserverArray_EndLimitedIterator_array_type = u8 ; pub type nsAutoTObserverArray_EndLimitedIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsAutoTObserverArray_BackwardIterator { pub _base : root::nsAutoTObserverArray_Iterator , } pub type nsAutoTObserverArray_BackwardIterator_array_type = u8 ; pub type nsAutoTObserverArray_BackwardIterator_base_type = root::nsAutoTObserverArray_Iterator ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsTObserverArray { pub _address : u8 , } pub type nsTObserverArray_base_type = u8 ; pub type nsTObserverArray_size_type = root::nsTObserverArray_base_size_type ; # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsIDOMEventTarget { pub _base : root::nsISupports , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIDOMEventTarget_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsIDOMEventTarget ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIDOMEventTarget > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsIDOMEventTarget ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIDOMEventTarget > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIDOMEventTarget ) ) ) ; } impl Clone for nsIDOMEventTarget { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsAttrChildContentList { _unused : [ u8 ; 0 ] , } impl Clone for nsAttrChildContentList { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsCSSSelectorList { _unused : [ u8 ; 0 ] , } impl Clone for nsCSSSelectorList { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsRange { _unused : [ u8 ; 0 ] , } impl Clone for nsRange { fn clone ( & self ) -> Self { * self } } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct RawServoSelectorList { _unused : [ u8 ; 0 ] , } impl Clone for RawServoSelectorList { fn clone ( & self ) -> Self { * self } } pub const NODE_HAS_LISTENERMANAGER : root::_bindgen_ty_33 = 4 ; pub const NODE_HAS_PROPERTIES : root::_bindgen_ty_33 = 8 ; pub const NODE_IS_ANONYMOUS_ROOT : root::_bindgen_ty_33 = 16 ; pub const NODE_IS_IN_NATIVE_ANONYMOUS_SUBTREE : root::_bindgen_ty_33 = 32 ; pub const NODE_IS_NATIVE_ANONYMOUS_ROOT : root::_bindgen_ty_33 = 64 ; pub const NODE_FORCE_XBL_BINDINGS : root::_bindgen_ty_33 = 128 ; pub const NODE_MAY_BE_IN_BINDING_MNGR : root::_bindgen_ty_33 = 256 ; pub const NODE_IS_EDITABLE : root::_bindgen_ty_33 = 512 ; pub const NODE_IS_NATIVE_ANONYMOUS : root::_bindgen_ty_33 = 1024 ; pub const NODE_IS_IN_SHADOW_TREE : root::_bindgen_ty_33 = 2048 ; pub const NODE_HAS_EMPTY_SELECTOR : root::_bindgen_ty_33 = 4096 ; pub const NODE_HAS_SLOW_SELECTOR : root::_bindgen_ty_33 = 8192 ; pub const NODE_HAS_EDGE_CHILD_SELECTOR : root::_bindgen_ty_33 = 16384 ; pub const NODE_HAS_SLOW_SELECTOR_LATER_SIBLINGS : root::_bindgen_ty_33 = 32768 ; pub const NODE_ALL_SELECTOR_FLAGS : root::_bindgen_ty_33 = 61440 ; pub const NODE_NEEDS_FRAME : root::_bindgen_ty_33 = 65536 ; pub const NODE_DESCENDANTS_NEED_FRAMES : root::_bindgen_ty_33 = 131072 ; pub const NODE_HAS_ACCESSKEY : root::_bindgen_ty_33 = 262144 ; pub const NODE_HAS_DIRECTION_RTL : root::_bindgen_ty_33 = 524288 ; pub const NODE_HAS_DIRECTION_LTR : root::_bindgen_ty_33 = 1048576 ; pub const NODE_ALL_DIRECTION_FLAGS : root::_bindgen_ty_33 = 1572864 ; pub const NODE_CHROME_ONLY_ACCESS : root::_bindgen_ty_33 = 2097152 ; pub const NODE_IS_ROOT_OF_CHROME_ONLY_ACCESS : root::_bindgen_ty_33 = 4194304 ; pub const NODE_TYPE_SPECIFIC_BITS_OFFSET : root::_bindgen_ty_33 = 21 ; pub type _bindgen_ty_33 = u32 ; 
  /// An internal interface that abstracts some DOMNode-related parts that both
     /// nsIContent and nsIDocument share.  An instance of this interface has a list
     /// of nsIContent children and provides access to them. 
@@ -1559,7 +1559,7 @@ where
         /// explicitly set as editable. 
  pub mEditableDescendantCount : u32 , } # [ test ] fn bindgen_test_layout_nsINode_nsSlots ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsINode_nsSlots > ( ) , 72usize , concat ! ( "Size of: " , stringify ! ( nsINode_nsSlots ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsINode_nsSlots > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsINode_nsSlots ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode_nsSlots > ( ) ) ) . mMutationObservers as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( nsINode_nsSlots ) , "::" , stringify ! ( mMutationObservers ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode_nsSlots > ( ) ) ) . mChildNodes as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( nsINode_nsSlots ) , "::" , stringify ! ( mChildNodes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode_nsSlots > ( ) ) ) . mWeakReference as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( nsINode_nsSlots ) , "::" , stringify ! ( mWeakReference ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode_nsSlots > ( ) ) ) . mCommonAncestorRanges as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( nsINode_nsSlots ) , "::" , stringify ! ( mCommonAncestorRanges ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode_nsSlots > ( ) ) ) . mEditableDescendantCount as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( nsINode_nsSlots ) , "::" , stringify ! ( mEditableDescendantCount ) ) ) ; } # [ repr ( u32 ) ] 
  /// Boolean flags 
- # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum nsINode_BooleanFlag { NodeHasRenderingObservers = 0 , IsInDocument = 1 , ParentIsContent = 2 , NodeIsElement = 3 , ElementHasID = 4 , ElementMayHaveClass = 5 , ElementMayHaveStyle = 6 , ElementHasName = 7 , ElementMayHaveContentEditableAttr = 8 , NodeIsCommonAncestorForRangeInSelection = 9 , NodeIsDescendantOfCommonAncestorForRangeInSelection = 10 , NodeIsCCMarkedRoot = 11 , NodeIsCCBlackTree = 12 , NodeIsPurpleRoot = 13 , ElementHasLockedStyleStates = 14 , ElementHasPointerLock = 15 , NodeMayHaveDOMMutationObserver = 16 , NodeIsContent = 17 , ElementHasAnimations = 18 , NodeHasValidDirAttribute = 19 , NodeHasDirAutoSet = 20 , NodeHasTextNodeDirectionalityMap = 21 , NodeAncestorHasDirAuto = 22 , ElementIsInStyleScope = 23 , ElementIsScopedStyleRoot = 24 , NodeHandlingClick = 25 , NodeHasRelevantHoverRules = 26 , ElementHasWeirdParserInsertionMode = 27 , ParserHasNotified = 28 , MayBeApzAware = 29 , ElementMayHaveAnonymousChildren = 30 , NodeMayHaveChildrenWithLayoutBoxesDisabled = 31 , BooleanFlagCount = 32 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsINode__bindgen_ty_2 { pub mPrimaryFrame : root :: __BindgenUnionField < * mut root::nsIFrame > , pub mSubtreeRoot : root :: __BindgenUnionField < * mut root::nsINode > , pub bindgen_union_field : u64 , } # [ test ] fn bindgen_test_layout_nsINode__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsINode__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsINode__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsINode__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsINode__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode__bindgen_ty_2 > ( ) ) ) . mPrimaryFrame as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsINode__bindgen_ty_2 ) , "::" , stringify ! ( mPrimaryFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode__bindgen_ty_2 > ( ) ) ) . mSubtreeRoot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsINode__bindgen_ty_2 ) , "::" , stringify ! ( mSubtreeRoot ) ) ) ; } impl Clone for nsINode__bindgen_ty_2 { fn clone ( & self ) -> Self { * self } } pub const nsINode_ELEMENT_NODE : :: std :: os :: raw :: c_ushort = 1 ; pub const nsINode_ATTRIBUTE_NODE : :: std :: os :: raw :: c_ushort = 2 ; pub const nsINode_TEXT_NODE : :: std :: os :: raw :: c_ushort = 3 ; pub const nsINode_CDATA_SECTION_NODE : :: std :: os :: raw :: c_ushort = 4 ; pub const nsINode_ENTITY_REFERENCE_NODE : :: std :: os :: raw :: c_ushort = 5 ; pub const nsINode_ENTITY_NODE : :: std :: os :: raw :: c_ushort = 6 ; pub const nsINode_PROCESSING_INSTRUCTION_NODE : :: std :: os :: raw :: c_ushort = 7 ; pub const nsINode_COMMENT_NODE : :: std :: os :: raw :: c_ushort = 8 ; pub const nsINode_DOCUMENT_NODE : :: std :: os :: raw :: c_ushort = 9 ; pub const nsINode_DOCUMENT_TYPE_NODE : :: std :: os :: raw :: c_ushort = 10 ; pub const nsINode_DOCUMENT_FRAGMENT_NODE : :: std :: os :: raw :: c_ushort = 11 ; pub const nsINode_NOTATION_NODE : :: std :: os :: raw :: c_ushort = 12 ; # [ test ] fn bindgen_test_layout_nsINode ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsINode > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( nsINode ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsINode > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsINode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mNodeInfo as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mParent as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mParent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mNextSibling as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mNextSibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mPreviousSibling as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mPreviousSibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mFirstChild as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mFirstChild ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mSlots as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mSlots ) ) ) ; } 
+ # [ derive ( Debug , Copy , Clone , PartialEq , Eq , Hash ) ] pub enum nsINode_BooleanFlag { NodeHasRenderingObservers = 0 , IsInDocument = 1 , ParentIsContent = 2 , NodeIsElement = 3 , ElementHasID = 4 , ElementMayHaveClass = 5 , ElementMayHaveStyle = 6 , ElementHasName = 7 , ElementMayHaveContentEditableAttr = 8 , NodeIsCommonAncestorForRangeInSelection = 9 , NodeIsDescendantOfCommonAncestorForRangeInSelection = 10 , NodeIsCCMarkedRoot = 11 , NodeIsCCBlackTree = 12 , NodeIsPurpleRoot = 13 , ElementHasLockedStyleStates = 14 , ElementHasPointerLock = 15 , NodeMayHaveDOMMutationObserver = 16 , NodeIsContent = 17 , ElementHasAnimations = 18 , NodeHasValidDirAttribute = 19 , NodeHasDirAutoSet = 20 , NodeHasTextNodeDirectionalityMap = 21 , NodeAncestorHasDirAuto = 22 , ElementIsInStyleScope = 23 , ElementIsScopedStyleRoot = 24 , NodeHandlingClick = 25 , NodeHasRelevantHoverRules = 26 , ElementHasWeirdParserInsertionMode = 27 , ParserHasNotified = 28 , MayBeApzAware = 29 , ElementMayHaveAnonymousChildren = 30 , NodeMayHaveChildrenWithLayoutBoxesDisabled = 31 , BooleanFlagCount = 32 , } # [ repr ( C ) ] # [ derive ( Debug , Copy ) ] pub struct nsINode__bindgen_ty_2 { pub mPrimaryFrame : root :: __BindgenUnionField < * mut root::nsIFrame > , pub mSubtreeRoot : root :: __BindgenUnionField < * mut root::nsINode > , pub bindgen_union_field : u64 , } # [ test ] fn bindgen_test_layout_nsINode__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsINode__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsINode__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsINode__bindgen_ty_2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsINode__bindgen_ty_2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode__bindgen_ty_2 > ( ) ) ) . mPrimaryFrame as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsINode__bindgen_ty_2 ) , "::" , stringify ! ( mPrimaryFrame ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode__bindgen_ty_2 > ( ) ) ) . mSubtreeRoot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsINode__bindgen_ty_2 ) , "::" , stringify ! ( mSubtreeRoot ) ) ) ; } impl Clone for nsINode__bindgen_ty_2 { fn clone ( & self ) -> Self { * self } } pub const nsINode_ELEMENT_NODE : u16 = 1 ; pub const nsINode_ATTRIBUTE_NODE : u16 = 2 ; pub const nsINode_TEXT_NODE : u16 = 3 ; pub const nsINode_CDATA_SECTION_NODE : u16 = 4 ; pub const nsINode_ENTITY_REFERENCE_NODE : u16 = 5 ; pub const nsINode_ENTITY_NODE : u16 = 6 ; pub const nsINode_PROCESSING_INSTRUCTION_NODE : u16 = 7 ; pub const nsINode_COMMENT_NODE : u16 = 8 ; pub const nsINode_DOCUMENT_NODE : u16 = 9 ; pub const nsINode_DOCUMENT_TYPE_NODE : u16 = 10 ; pub const nsINode_DOCUMENT_FRAGMENT_NODE : u16 = 11 ; pub const nsINode_NOTATION_NODE : u16 = 12 ; # [ test ] fn bindgen_test_layout_nsINode ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsINode > ( ) , 88usize , concat ! ( "Size of: " , stringify ! ( nsINode ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsINode > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsINode ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mNodeInfo as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mNodeInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mParent as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mParent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mNextSibling as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mNextSibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mPreviousSibling as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mPreviousSibling ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mFirstChild as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mFirstChild ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsINode > ( ) ) ) . mSlots as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( nsINode ) , "::" , stringify ! ( mSlots ) ) ) ; } 
  /// Functions to create content, to be used only inside Gecko
     /// (mozilla/content and mozilla/layout). 
  # [ repr ( C ) ] pub struct nsIContent { pub _base : root::nsINode , } pub type nsIContent_IMEState = root::mozilla::widget::IMEState ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsIContent_COMTypeInfo { pub _address : u8 , } 
@@ -1976,7 +1976,7 @@ where
     /// Each theme backend defines the ThemeGeometryType values it needs in its
     /// own nsITheme subclass. eThemeGeometryTypeUnknown is the only value that's
     /// shared between backends. 
- pub type nsITheme_ThemeGeometryType = u8 ; pub const nsITheme_eThemeGeometryTypeUnknown : root::nsITheme__bindgen_ty_1 = 0 ; pub type nsITheme__bindgen_ty_1 = u32 ; # [ test ] fn bindgen_test_layout_nsITheme ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsITheme > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsITheme ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsITheme > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsITheme ) ) ) ; } impl Clone for nsITheme { fn clone ( & self ) -> Self { * self } } pub type nsIWidget_LayoutDeviceIntPoint = root::mozilla::LayoutDeviceIntPoint ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsIWidget_LongTapInfo { pub mPointerId : i32 , pub mPosition : root::nsIWidget_LayoutDeviceIntPoint , pub mDuration : root::mozilla::TimeDuration , pub mObserver : root :: nsCOMPtr , pub mStamp : root::mozilla::TimeStamp , } # [ test ] fn bindgen_test_layout_nsIWidget_LongTapInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIWidget_LongTapInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( nsIWidget_LongTapInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIWidget_LongTapInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIWidget_LongTapInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mPointerId as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mPointerId ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mPosition as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mPosition ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mDuration as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mObserver as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mObserver ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mStamp as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mStamp ) ) ) ; } pub const ELEMENT_SHARED_RESTYLE_BIT_1 : root::_bindgen_ty_31 = 8388608 ; pub const ELEMENT_SHARED_RESTYLE_BIT_2 : root::_bindgen_ty_31 = 16777216 ; pub const ELEMENT_SHARED_RESTYLE_BIT_3 : root::_bindgen_ty_31 = 33554432 ; pub const ELEMENT_SHARED_RESTYLE_BIT_4 : root::_bindgen_ty_31 = 67108864 ; pub const ELEMENT_SHARED_RESTYLE_BITS : root::_bindgen_ty_31 = 125829120 ; pub const ELEMENT_HAS_DIRTY_DESCENDANTS_FOR_SERVO : root::_bindgen_ty_31 = 8388608 ; pub const ELEMENT_HAS_ANIMATION_ONLY_DIRTY_DESCENDANTS_FOR_SERVO : root::_bindgen_ty_31 = 16777216 ; pub const ELEMENT_HAS_SNAPSHOT : root::_bindgen_ty_31 = 33554432 ; pub const ELEMENT_HANDLED_SNAPSHOT : root::_bindgen_ty_31 = 67108864 ; pub const ELEMENT_HAS_PENDING_RESTYLE : root::_bindgen_ty_31 = 8388608 ; pub const ELEMENT_IS_POTENTIAL_RESTYLE_ROOT : root::_bindgen_ty_31 = 16777216 ; pub const ELEMENT_HAS_PENDING_ANIMATION_ONLY_RESTYLE : root::_bindgen_ty_31 = 33554432 ; pub const ELEMENT_IS_POTENTIAL_ANIMATION_ONLY_RESTYLE_ROOT : root::_bindgen_ty_31 = 67108864 ; pub const ELEMENT_IS_CONDITIONAL_RESTYLE_ANCESTOR : root::_bindgen_ty_31 = 134217728 ; pub const ELEMENT_HAS_CHILD_WITH_LATER_SIBLINGS_HINT : root::_bindgen_ty_31 = 268435456 ; pub const ELEMENT_PENDING_RESTYLE_FLAGS : root::_bindgen_ty_31 = 41943040 ; pub const ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS : root::_bindgen_ty_31 = 83886080 ; pub const ELEMENT_ALL_RESTYLE_FLAGS : root::_bindgen_ty_31 = 260046848 ; pub const ELEMENT_TYPE_SPECIFIC_BITS_OFFSET : root::_bindgen_ty_31 = 27 ; pub type _bindgen_ty_31 = u32 ; pub type nsStyledElementBase = root::mozilla::dom::Element ; # [ repr ( C ) ] pub struct nsStyledElement { pub _base : root::nsStyledElementBase , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsStyledElement_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsStyledElement ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsStyledElement > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( nsStyledElement ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsStyledElement > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsStyledElement ) ) ) ; } pub type nsMappedAttributeElementBase = root::nsStyledElement ; # [ repr ( C ) ] pub struct nsMappedAttributeElement { pub _base : root::nsMappedAttributeElementBase , } # [ test ] fn bindgen_test_layout_nsMappedAttributeElement ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsMappedAttributeElement > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( nsMappedAttributeElement ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsMappedAttributeElement > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsMappedAttributeElement ) ) ) ; } 
+ pub type nsITheme_ThemeGeometryType = u8 ; pub const nsITheme_eThemeGeometryTypeUnknown : root::nsITheme__bindgen_ty_1 = 0 ; pub type nsITheme__bindgen_ty_1 = u32 ; # [ test ] fn bindgen_test_layout_nsITheme ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsITheme > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( nsITheme ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsITheme > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsITheme ) ) ) ; } impl Clone for nsITheme { fn clone ( & self ) -> Self { * self } } pub type nsIWidget_LayoutDeviceIntPoint = root::mozilla::LayoutDeviceIntPoint ; # [ repr ( C ) ] # [ derive ( Debug ) ] pub struct nsIWidget_LongTapInfo { pub mPointerId : i32 , pub mPosition : root::nsIWidget_LayoutDeviceIntPoint , pub mDuration : root::mozilla::TimeDuration , pub mObserver : root :: nsCOMPtr , pub mStamp : root::mozilla::TimeStamp , } # [ test ] fn bindgen_test_layout_nsIWidget_LongTapInfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsIWidget_LongTapInfo > ( ) , 40usize , concat ! ( "Size of: " , stringify ! ( nsIWidget_LongTapInfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsIWidget_LongTapInfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsIWidget_LongTapInfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mPointerId as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mPointerId ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mPosition as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mPosition ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mDuration as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mDuration ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mObserver as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mObserver ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < nsIWidget_LongTapInfo > ( ) ) ) . mStamp as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( nsIWidget_LongTapInfo ) , "::" , stringify ! ( mStamp ) ) ) ; } pub const ELEMENT_SHARED_RESTYLE_BIT_1 : root::_bindgen_ty_34 = 8388608 ; pub const ELEMENT_SHARED_RESTYLE_BIT_2 : root::_bindgen_ty_34 = 16777216 ; pub const ELEMENT_SHARED_RESTYLE_BIT_3 : root::_bindgen_ty_34 = 33554432 ; pub const ELEMENT_SHARED_RESTYLE_BIT_4 : root::_bindgen_ty_34 = 67108864 ; pub const ELEMENT_SHARED_RESTYLE_BITS : root::_bindgen_ty_34 = 125829120 ; pub const ELEMENT_HAS_DIRTY_DESCENDANTS_FOR_SERVO : root::_bindgen_ty_34 = 8388608 ; pub const ELEMENT_HAS_ANIMATION_ONLY_DIRTY_DESCENDANTS_FOR_SERVO : root::_bindgen_ty_34 = 16777216 ; pub const ELEMENT_HAS_SNAPSHOT : root::_bindgen_ty_34 = 33554432 ; pub const ELEMENT_HANDLED_SNAPSHOT : root::_bindgen_ty_34 = 67108864 ; pub const ELEMENT_HAS_PENDING_RESTYLE : root::_bindgen_ty_34 = 8388608 ; pub const ELEMENT_IS_POTENTIAL_RESTYLE_ROOT : root::_bindgen_ty_34 = 16777216 ; pub const ELEMENT_HAS_PENDING_ANIMATION_ONLY_RESTYLE : root::_bindgen_ty_34 = 33554432 ; pub const ELEMENT_IS_POTENTIAL_ANIMATION_ONLY_RESTYLE_ROOT : root::_bindgen_ty_34 = 67108864 ; pub const ELEMENT_IS_CONDITIONAL_RESTYLE_ANCESTOR : root::_bindgen_ty_34 = 134217728 ; pub const ELEMENT_HAS_CHILD_WITH_LATER_SIBLINGS_HINT : root::_bindgen_ty_34 = 268435456 ; pub const ELEMENT_PENDING_RESTYLE_FLAGS : root::_bindgen_ty_34 = 41943040 ; pub const ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS : root::_bindgen_ty_34 = 83886080 ; pub const ELEMENT_ALL_RESTYLE_FLAGS : root::_bindgen_ty_34 = 260046848 ; pub const ELEMENT_TYPE_SPECIFIC_BITS_OFFSET : root::_bindgen_ty_34 = 27 ; pub type _bindgen_ty_34 = u32 ; pub type nsStyledElementBase = root::mozilla::dom::Element ; # [ repr ( C ) ] pub struct nsStyledElement { pub _base : root::nsStyledElementBase , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct nsStyledElement_COMTypeInfo { pub _address : u8 , } # [ test ] fn bindgen_test_layout_nsStyledElement ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsStyledElement > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( nsStyledElement ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsStyledElement > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsStyledElement ) ) ) ; } pub type nsMappedAttributeElementBase = root::nsStyledElement ; # [ repr ( C ) ] pub struct nsMappedAttributeElement { pub _base : root::nsMappedAttributeElementBase , } # [ test ] fn bindgen_test_layout_nsMappedAttributeElement ( ) { assert_eq ! ( :: std :: mem :: size_of :: < nsMappedAttributeElement > ( ) , 120usize , concat ! ( "Size of: " , stringify ! ( nsMappedAttributeElement ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < nsMappedAttributeElement > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( nsMappedAttributeElement ) ) ) ; } 
  /// The Name Space Manager tracks the association between a NameSpace
     /// URI and the int32_t runtime id. Mappings between NameSpaces and
     /// NameSpace prefixes are managed by nsINameSpaces.
