#!/bin/bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"  # cd 至当前执行脚本堆栈的第一个脚本，即正在执行的本脚本的路径，然后输出当前目录绝对路径
ROOT_DIR="$(dirname "$SCRIPT_DIR")"  # 似乎是一个有些 hack 的用法，通过删除 SCRIPT_DIR 的最后一个尾缀或者说路径分量，以得到父目录的路径
. "$ROOT_DIR/config.sh"  # 引入 config.sh 脚本中定义的配置变量

function usage {
	cat >&2 <<DONE
Usage: $0 -p platforms
Options
 -p PLATFORMS        Platforms to build (m=Mac, w=Windows, l=Linux)
 -t                  add devtools
DONE
	exit 1
}

DEVTOOLS=0
PLATFORM=""
while getopts "p:t" opt; do
	case $opt in
	t)
		DEVTOOLS=1
		;;
	p)
		for i in $(seq 0 1 $((${#OPTARG} - 1))); do
			case ${OPTARG:i:1} in
			m) PLATFORM="m" ;;
			w) PLATFORM="w" ;;
			l) PLATFORM="l" ;;
			*)
				echo "$0: Invalid platform option ${OPTARG:i:1}"
				usage
				;;
			esac
		done
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		exit 1
		;;
	esac
done

# 判断平台参数有没有被设置，如果没有，就根据系统类型设置
if [ -z $PLATFORM ]; then
	if [ "$(uname)" = "Darwin" ]; then
		PLATFORM="m"
	elif [ "$(uname)" = "Linux" ]; then
		PLATFORM="l"
	elif [ "$(uname -o 2>/dev/null)" = "Cygwin" ]; then  # 判断是否是 Cygwin，同时将 uname -o 的标准错误输出丢弃防止脚本执行出现异常
		PLATFORM="w"
	fi
fi

# 编译来源为源码
CHANNEL="source"

# $ZOTERO_BUILD_DIR 定义于 config.sh 中，为 REPORT_DIR/zotero-build，不属于本项目仓库，而是 zotero-build 项目仓库
VERSION=$(perl -ne 'print and last if s/.*<em:version>(.{3}).+/\1/;' "$ZOTERO_SOURCE_DIR/install.rdf")
if [ $VERSION = "4.0" ]; then
  # 4.0 也是按照两步走打包的？？？
	"$ZOTERO_BUILD_DIR/xpi/build_xpi_4.0" "$ZOTERO_SOURCE_DIR" $CHANNEL
	"$ROOT_DIR/build.sh" -f "$ZOTERO_BUILD_DIR/xpi/build/zotero-build.xpi" -p $PLATFORM -c $CHANNEL -s
else
	PARAMS=""
	if [ $DEVTOOLS -eq 1 ]; then
		PARAMS="-t"
	fi

	hash=$(git -C "$ZOTERO_SOURCE_DIR" rev-parse --short HEAD)

	# 为何此处调用构建插件的脚本对源码目录下的构建产物做二次编译
	# zotero 本质是一个运行在浏览器里的插件，这一部将产物直接经由 build_xpi 脚本打包成 xpi 文件
	"$ZOTERO_BUILD_DIR/xpi/build_xpi" -s "$ZOTERO_SOURCE_DIR/build" -c $CHANNEL -m $hash
	"$ROOT_DIR/build.sh" -d "$ZOTERO_BUILD_DIR/xpi/build/staging" -p $PLATFORM -c $CHANNEL -s $PARAMS  # 这一步就整合插件打包完整客户端了
fi
